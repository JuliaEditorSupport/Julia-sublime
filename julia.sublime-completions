{
 "scope": "source.julia",

"completions":
[{ "trigger": "\\Alpha", "contents": "Α" },
{ "trigger": "\\Beta", "contents": "Β" },
{ "trigger": "\\Gamma", "contents": "Γ" },
{ "trigger": "\\Delta", "contents": "Δ" },
{ "trigger": "\\Epsilon", "contents": "Ε" },
{ "trigger": "\\Zeta", "contents": "Ζ" },
{ "trigger": "\\Eta", "contents": "Η" },
{ "trigger": "\\Theta", "contents": "Θ" },
{ "trigger": "\\Kappa", "contents": "Κ" },
{ "trigger": "\\Lambda", "contents": "Λ" },
{ "trigger": "\\upMu", "contents": "Μ" },
{ "trigger": "\\upNu", "contents": "Ν" },
{ "trigger": "\\Xi", "contents": "Ξ" },
{ "trigger": "\\upOmicron", "contents": "Ο" },
{ "trigger": "\\Pi", "contents": "Π" },
{ "trigger": "\\Rho", "contents": "Ρ" },
{ "trigger": "\\Sigma", "contents": "Σ" },
{ "trigger": "\\Tau", "contents": "Τ" },
{ "trigger": "\\Upsilon", "contents": "Υ" },
{ "trigger": "\\Phi", "contents": "Φ" },
{ "trigger": "\\Chi", "contents": "Χ" },
{ "trigger": "\\Psi", "contents": "Ψ" },
{ "trigger": "\\Omega", "contents": "Ω" },
{ "trigger": "\\alpha", "contents": "α" },
{ "trigger": "\\beta", "contents": "β" },
{ "trigger": "\\gamma", "contents": "γ" },
{ "trigger": "\\delta", "contents": "δ" },
{ "trigger": "\\upepsilon", "contents": "ε" },
{ "trigger": "\\zeta", "contents": "ζ" },
{ "trigger": "\\eta", "contents": "η" },
{ "trigger": "\\theta", "contents": "θ" },
{ "trigger": "\\iota", "contents": "ι" },
{ "trigger": "\\kappa", "contents": "κ" },
{ "trigger": "\\lambda", "contents": "λ" },
{ "trigger": "\\mu", "contents": "μ" },
{ "trigger": "\\nu", "contents": "ν" },
{ "trigger": "\\xi", "contents": "ξ" },
{ "trigger": "\\upomicron", "contents": "ο" },
{ "trigger": "\\pi", "contents": "π" },
{ "trigger": "\\rho", "contents": "ρ" },
{ "trigger": "\\varsigma", "contents": "ς" },
{ "trigger": "\\sigma", "contents": "σ" },
{ "trigger": "\\tau", "contents": "τ" },
{ "trigger": "\\upsilon", "contents": "υ" },
{ "trigger": "\\varphi", "contents": "φ" },
{ "trigger": "\\chi", "contents": "χ" },
{ "trigger": "\\psi", "contents": "ψ" },
{ "trigger": "\\omega", "contents": "ω" },
{ "trigger": "\\upvarbeta", "contents": "ϐ" },
{ "trigger": "\\vartheta", "contents": "ϑ" },
{ "trigger": "\\phi", "contents": "ϕ" },
{ "trigger": "\\varpi", "contents": "ϖ" },
{ "trigger": "\\upoldKoppa", "contents": "Ϙ" },
{ "trigger": "\\upoldkoppa", "contents": "ϙ" },
{ "trigger": "\\Stigma", "contents": "Ϛ" },
{ "trigger": "\\upstigma", "contents": "ϛ" },
{ "trigger": "\\Digamma", "contents": "Ϝ" },
{ "trigger": "\\digamma", "contents": "ϝ" },
{ "trigger": "\\Koppa", "contents": "Ϟ" },
{ "trigger": "\\upkoppa", "contents": "ϟ" },
{ "trigger": "\\Sampi", "contents": "Ϡ" },
{ "trigger": "\\upsampi", "contents": "ϡ" },
{ "trigger": "\\varkappa", "contents": "ϰ" },
{ "trigger": "\\varrho", "contents": "ϱ" },
{ "trigger": "\\textTheta", "contents": "ϴ" },
{ "trigger": "\\epsilon", "contents": "ϵ" },
{ "trigger": "\\backepsilon", "contents": "϶" },
{ "trigger": "\\^A", "contents": "ᴬ" },
{ "trigger": "\\^B", "contents": "ᴮ" },
{ "trigger": "\\^D", "contents": "ᴰ" },
{ "trigger": "\\^E", "contents": "ᴱ" },
{ "trigger": "\\^G", "contents": "ᴳ" },
{ "trigger": "\\^H", "contents": "ᴴ" },
{ "trigger": "\\^I", "contents": "ᴵ" },
{ "trigger": "\\^J", "contents": "ᴶ" },
{ "trigger": "\\^K", "contents": "ᴷ" },
{ "trigger": "\\^L", "contents": "ᴸ" },
{ "trigger": "\\^M", "contents": "ᴹ" },
{ "trigger": "\\^N", "contents": "ᴺ" },
{ "trigger": "\\^O", "contents": "ᴼ" },
{ "trigger": "\\^P", "contents": "ᴾ" },
{ "trigger": "\\^R", "contents": "ᴿ" },
{ "trigger": "\\^T", "contents": "ᵀ" },
{ "trigger": "\\^U", "contents": "ᵁ" },
{ "trigger": "\\^W", "contents": "ᵂ" },
{ "trigger": "\\^a", "contents": "ᵃ" },
{ "trigger": "\\^alpha", "contents": "ᵅ" },
{ "trigger": "\\^b", "contents": "ᵇ" },
{ "trigger": "\\^d", "contents": "ᵈ" },
{ "trigger": "\\^e", "contents": "ᵉ" },
{ "trigger": "\\^epsilon", "contents": "ᵋ" },
{ "trigger": "\\^g", "contents": "ᵍ" },
{ "trigger": "\\^k", "contents": "ᵏ" },
{ "trigger": "\\^m", "contents": "ᵐ" },
{ "trigger": "\\^o", "contents": "ᵒ" },
{ "trigger": "\\^p", "contents": "ᵖ" },
{ "trigger": "\\^t", "contents": "ᵗ" },
{ "trigger": "\\^u", "contents": "ᵘ" },
{ "trigger": "\\^v", "contents": "ᵛ" },
{ "trigger": "\\^beta", "contents": "ᵝ" },
{ "trigger": "\\^gamma", "contents": "ᵞ" },
{ "trigger": "\\^delta", "contents": "ᵟ" },
{ "trigger": "\\^phi", "contents": "ᵠ" },
{ "trigger": "\\^chi", "contents": "ᵡ" },
{ "trigger": "\\_i", "contents": "ᵢ" },
{ "trigger": "\\_r", "contents": "ᵣ" },
{ "trigger": "\\_u", "contents": "ᵤ" },
{ "trigger": "\\_v", "contents": "ᵥ" },
{ "trigger": "\\_beta", "contents": "ᵦ" },
{ "trigger": "\\_gamma", "contents": "ᵧ" },
{ "trigger": "\\_rho", "contents": "ᵨ" },
{ "trigger": "\\_phi", "contents": "ᵩ" },
{ "trigger": "\\_chi", "contents": "ᵪ" },
{ "trigger": "\\^c", "contents": "ᶜ" },
{ "trigger": "\\^0", "contents": "⁰" },
{ "trigger": "\\^i", "contents": "ⁱ" },
{ "trigger": "\\^4", "contents": "⁴" },
{ "trigger": "\\^5", "contents": "⁵" },
{ "trigger": "\\^6", "contents": "⁶" },
{ "trigger": "\\^7", "contents": "⁷" },
{ "trigger": "\\^8", "contents": "⁸" },
{ "trigger": "\\^9", "contents": "⁹" },
{ "trigger": "\\^+", "contents": "⁺" },
{ "trigger": "\\^-", "contents": "⁻" },
{ "trigger": "\\^=", "contents": "⁼" },
{ "trigger": "\\^(", "contents": "⁽" },
{ "trigger": "\\^)", "contents": "⁾" },
{ "trigger": "\\^n", "contents": "ⁿ" },
{ "trigger": "\\_0", "contents": "₀" },
{ "trigger": "\\_1", "contents": "₁" },
{ "trigger": "\\_2", "contents": "₂" },
{ "trigger": "\\_3", "contents": "₃" },
{ "trigger": "\\_4", "contents": "₄" },
{ "trigger": "\\_5", "contents": "₅" },
{ "trigger": "\\_6", "contents": "₆" },
{ "trigger": "\\_7", "contents": "₇" },
{ "trigger": "\\_8", "contents": "₈" },
{ "trigger": "\\_9", "contents": "₉" },
{ "trigger": "\\_+", "contents": "₊" },
{ "trigger": "\\_-", "contents": "₋" },
{ "trigger": "\\_=", "contents": "₌" },
{ "trigger": "\\_(", "contents": "₍" },
{ "trigger": "\\_)", "contents": "₎" },
{ "trigger": "\\_a", "contents": "ₐ" },
{ "trigger": "\\_e", "contents": "ₑ" },
{ "trigger": "\\_o", "contents": "ₒ" },
{ "trigger": "\\_x", "contents": "ₓ" },
{ "trigger": "\\_schwa", "contents": "ₔ" },
{ "trigger": "\\_h", "contents": "ₕ" },
{ "trigger": "\\_k", "contents": "ₖ" },
{ "trigger": "\\_l", "contents": "ₗ" },
{ "trigger": "\\_m", "contents": "ₘ" },
{ "trigger": "\\_n", "contents": "ₙ" },
{ "trigger": "\\_p", "contents": "ₚ" },
{ "trigger": "\\_s", "contents": "ₛ" },
{ "trigger": "\\_t", "contents": "ₜ" },
{ "trigger": "\\prod", "contents": "∏" },
{ "trigger": "\\coprod", "contents": "∐" },
{ "trigger": "\\sum", "contents": "∑" },
{ "trigger": "\\int", "contents": "∫" },
{ "trigger": "\\iint", "contents": "∬" },
{ "trigger": "\\iiint", "contents": "∭" },
{ "trigger": "\\oint", "contents": "∮" },
{ "trigger": "\\oiint", "contents": "∯" },
{ "trigger": "\\oiiint", "contents": "∰" },
{ "trigger": "\\clwintegral", "contents": "∱" },
{ "trigger": "\\varointclockwise", "contents": "∲" },
{ "trigger": "\\ointctrclockwise", "contents": "∳" },
{ "trigger": "\\:sunny:", "contents": "☀" },
{ "trigger": "\\:cloud:", "contents": "☁" },
{ "trigger": "\\bigstar", "contents": "★" },
{ "trigger": "\\bigwhitestar", "contents": "☆" },
{ "trigger": "\\astrosun", "contents": "☉" },
{ "trigger": "\\:phone:", "contents": "☎" },
{ "trigger": "\\:ballot_box_with_check:", "contents": "☑" },
{ "trigger": "\\:umbrella:", "contents": "☔" },
{ "trigger": "\\:coffee:", "contents": "☕" },
{ "trigger": "\\:point_up:", "contents": "☝" },
{ "trigger": "\\danger", "contents": "☡" },
{ "trigger": "\\:relaxed:", "contents": "☺" },
{ "trigger": "\\blacksmiley", "contents": "☻" },
{ "trigger": "\\sun", "contents": "☼" },
{ "trigger": "\\rightmoon", "contents": "☽" },
{ "trigger": "\\mercury", "contents": "☿" },
{ "trigger": "\\venus,", "contents": "♀" },
{ "trigger": "\\male,", "contents": "♂" },
{ "trigger": "\\jupiter", "contents": "♃" },
{ "trigger": "\\saturn", "contents": "♄" },
{ "trigger": "\\uranus", "contents": "♅" },
{ "trigger": "\\neptune", "contents": "♆" },
{ "trigger": "\\pluto", "contents": "♇" },
{ "trigger": "\\aries,", "contents": "♈" },
{ "trigger": "\\taurus,", "contents": "♉" },
{ "trigger": "\\gemini,", "contents": "♊" },
{ "trigger": "\\cancer,", "contents": "♋" },
{ "trigger": "\\leo,", "contents": "♌" },
{ "trigger": "\\virgo,", "contents": "♍" },
{ "trigger": "\\libra,", "contents": "♎" },
{ "trigger": "\\scorpio,", "contents": "♏" },
{ "trigger": "\\sagittarius,", "contents": "♐" },
{ "trigger": "\\capricornus,", "contents": "♑" },
{ "trigger": "\\aquarius,", "contents": "♒" },
{ "trigger": "\\pisces,", "contents": "♓" },
{ "trigger": "\\spadesuit,", "contents": "♠" },
{ "trigger": "\\heartsuit", "contents": "♡" },
{ "trigger": "\\diamondsuit", "contents": "♢" },
{ "trigger": "\\clubsuit,", "contents": "♣" },
{ "trigger": "\\varspadesuit", "contents": "♤" },
{ "trigger": "\\varheartsuit,", "contents": "♥" },
{ "trigger": "\\vardiamondsuit,", "contents": "♦" },
{ "trigger": "\\varclubsuit", "contents": "♧" },
{ "trigger": "\\:hotsprings:", "contents": "♨" },
{ "trigger": "\\quarternote", "contents": "♩" },
{ "trigger": "\\eighthnote", "contents": "♪" },
{ "trigger": "\\twonotes", "contents": "♫" },
{ "trigger": "\\flat", "contents": "♭" },
{ "trigger": "\\natural", "contents": "♮" },
{ "trigger": "\\sharp", "contents": "♯" },
{ "trigger": "\\:recycle:", "contents": "♻" },
{ "trigger": "\\acidfree", "contents": "♾" },
{ "trigger": "\\:wheelchair:", "contents": "♿" },
{ "trigger": "\\dicei", "contents": "⚀" },
{ "trigger": "\\diceii", "contents": "⚁" },
{ "trigger": "\\diceiii", "contents": "⚂" },
{ "trigger": "\\diceiv", "contents": "⚃" },
{ "trigger": "\\dicev", "contents": "⚄" },
{ "trigger": "\\dicevi", "contents": "⚅" },
{ "trigger": "\\circledrightdot", "contents": "⚆" },
{ "trigger": "\\circledtwodots", "contents": "⚇" },
{ "trigger": "\\blackcircledrightdot", "contents": "⚈" },
{ "trigger": "\\blackcircledtwodots", "contents": "⚉" },
{ "trigger": "\\:anchor:", "contents": "⚓" },
{ "trigger": "\\:warning:", "contents": "⚠" },
{ "trigger": "\\:zap:", "contents": "⚡" },
{ "trigger": "\\Hermaphrodite", "contents": "⚥" },
{ "trigger": "\\mbfAlpha", "contents": "𝚨" },
{ "trigger": "\\mbfBeta", "contents": "𝚩" },
{ "trigger": "\\mbfGamma", "contents": "𝚪" },
{ "trigger": "\\mbfDelta", "contents": "𝚫" },
{ "trigger": "\\mbfEpsilon", "contents": "𝚬" },
{ "trigger": "\\mbfZeta", "contents": "𝚭" },
{ "trigger": "\\mbfEta", "contents": "𝚮" },
{ "trigger": "\\mbfTheta", "contents": "𝚯" },
{ "trigger": "\\mbfIota", "contents": "𝚰" },
{ "trigger": "\\mbfKappa", "contents": "𝚱" },
{ "trigger": "\\mbfLambda", "contents": "𝚲" },
{ "trigger": "\\mbfMu", "contents": "𝚳" },
{ "trigger": "\\mbfNu", "contents": "𝚴" },
{ "trigger": "\\mbfXi", "contents": "𝚵" },
{ "trigger": "\\mbfOmicron", "contents": "𝚶" },
{ "trigger": "\\mbfPi", "contents": "𝚷" },
{ "trigger": "\\mbfRho", "contents": "𝚸" },
{ "trigger": "\\mbfvarTheta", "contents": "𝚹" },
{ "trigger": "\\mbfSigma", "contents": "𝚺" },
{ "trigger": "\\mbfTau", "contents": "𝚻" },
{ "trigger": "\\mbfUpsilon", "contents": "𝚼" },
{ "trigger": "\\mbfPhi", "contents": "𝚽" },
{ "trigger": "\\mbfChi", "contents": "𝚾" },
{ "trigger": "\\mbfPsi", "contents": "𝚿" },
{ "trigger": "\\mbfOmega", "contents": "𝛀" },
{ "trigger": "\\mbfnabla", "contents": "𝛁" },
{ "trigger": "\\mbfalpha", "contents": "𝛂" },
{ "trigger": "\\mbfbeta", "contents": "𝛃" },
{ "trigger": "\\mbfgamma", "contents": "𝛄" },
{ "trigger": "\\mbfdelta", "contents": "𝛅" },
{ "trigger": "\\mbfepsilon", "contents": "𝛆" },
{ "trigger": "\\mbfzeta", "contents": "𝛇" },
{ "trigger": "\\mbfeta", "contents": "𝛈" },
{ "trigger": "\\mbftheta", "contents": "𝛉" },
{ "trigger": "\\mbfiota", "contents": "𝛊" },
{ "trigger": "\\mbfkappa", "contents": "𝛋" },
{ "trigger": "\\mbflambda", "contents": "𝛌" },
{ "trigger": "\\mbfmu", "contents": "𝛍" },
{ "trigger": "\\mbfnu", "contents": "𝛎" },
{ "trigger": "\\mbfxi", "contents": "𝛏" },
{ "trigger": "\\mbfomicron", "contents": "𝛐" },
{ "trigger": "\\mbfpi", "contents": "𝛑" },
{ "trigger": "\\mbfrho", "contents": "𝛒" },
{ "trigger": "\\mbfvarsigma", "contents": "𝛓" },
{ "trigger": "\\mbfsigma", "contents": "𝛔" },
{ "trigger": "\\mbftau", "contents": "𝛕" },
{ "trigger": "\\mbfupsilon", "contents": "𝛖" },
{ "trigger": "\\mbfvarphi", "contents": "𝛗" },
{ "trigger": "\\mbfchi", "contents": "𝛘" },
{ "trigger": "\\mbfpsi", "contents": "𝛙" },
{ "trigger": "\\mbfomega", "contents": "𝛚" },
{ "trigger": "\\mbfpartial", "contents": "𝛛" },
{ "trigger": "\\mbfvarepsilon", "contents": "𝛜" },
{ "trigger": "\\mbfvartheta", "contents": "𝛝" },
{ "trigger": "\\mbfvarkappa", "contents": "𝛞" },
{ "trigger": "\\mbfphi", "contents": "𝛟" },
{ "trigger": "\\mbfvarrho", "contents": "𝛠" },
{ "trigger": "\\mbfvarpi", "contents": "𝛡" },
{ "trigger": "\\:grinning:", "contents": "😀" },
{ "trigger": "\\:grin:", "contents": "😁" },
{ "trigger": "\\:joy:", "contents": "😂" },
{ "trigger": "\\:smiley:", "contents": "😃" },
{ "trigger": "\\:smile:", "contents": "😄" },
{ "trigger": "\\:sweat_smile:", "contents": "😅" },
{ "trigger": "\\:laughing:", "contents": "😆" },
{ "trigger": "\\:innocent:", "contents": "😇" },
{ "trigger": "\\:smiling_imp:", "contents": "😈" },
{ "trigger": "\\:wink:", "contents": "😉" },
{ "trigger": "\\:blush:", "contents": "😊" },
{ "trigger": "\\:yum:", "contents": "😋" },
{ "trigger": "\\:relieved:", "contents": "😌" },
{ "trigger": "\\:heart_eyes:", "contents": "😍" },
{ "trigger": "\\:sunglasses:", "contents": "😎" },
{ "trigger": "\\:smirk:", "contents": "😏" },
{ "trigger": "\\:neutral_face:", "contents": "😐" },
{ "trigger": "\\:expressionless:", "contents": "😑" },
{ "trigger": "\\:unamused:", "contents": "😒" },
{ "trigger": "\\:sweat:", "contents": "😓" },
{ "trigger": "\\:pensive:", "contents": "😔" },
{ "trigger": "\\:confused:", "contents": "😕" },
{ "trigger": "\\:confounded:", "contents": "😖" },
{ "trigger": "\\:kissing:", "contents": "😗" },
{ "trigger": "\\:kissing_heart:", "contents": "😘" },
{ "trigger": "\\:kissing_smiling_eyes:", "contents": "😙" },
{ "trigger": "\\:kissing_closed_eyes:", "contents": "😚" },
{ "trigger": "\\:stuck_out_tongue:", "contents": "😛" },
{ "trigger": "\\:stuck_out_tongue_winking_eye:", "contents": "😜" },
{ "trigger": "\\:stuck_out_tongue_closed_eyes:", "contents": "😝" },
{ "trigger": "\\:disappointed:", "contents": "😞" },
{ "trigger": "\\:worried:", "contents": "😟" },
{ "trigger": "\\:angry:", "contents": "😠" },
{ "trigger": "\\:rage:", "contents": "😡" },
{ "trigger": "\\:cry:", "contents": "😢" },
{ "trigger": "\\:persevere:", "contents": "😣" },
{ "trigger": "\\:disappointed_relieved:", "contents": "😥" },
{ "trigger": "\\:frowning:", "contents": "😦" },
{ "trigger": "\\:anguished:", "contents": "😧" },
{ "trigger": "\\:fearful:", "contents": "😨" },
{ "trigger": "\\:weary:", "contents": "😩" },
{ "trigger": "\\:sleepy:", "contents": "😪" },
{ "trigger": "\\:tired_face:", "contents": "😫" },
{ "trigger": "\\:sob:", "contents": "😭" },
{ "trigger": "\\:open_mouth:", "contents": "😮" },
{ "trigger": "\\:hushed:", "contents": "😯" },
{ "trigger": "\\:cold_sweat:", "contents": "😰" },
{ "trigger": "\\:scream:", "contents": "😱" },
{ "trigger": "\\:astonished:", "contents": "😲" },
{ "trigger": "\\:flushed:", "contents": "😳" },
{ "trigger": "\\:sleeping:", "contents": "😴" },
{ "trigger": "\\:dizzy_face:", "contents": "😵" },
{ "trigger": "\\:no_mouth:", "contents": "😶" },
{ "trigger": "\\:mask:", "contents": "😷" },
{ "trigger": "exit", "contents": "exit(${1:[code]})" },
{ "trigger": "quit", "contents": "quit()" },
{ "trigger": "atexit", "contents": "atexit(${1:f})" },
{ "trigger": "isinteractive", "contents": "isinteractive()" },
{ "trigger": "whos", "contents": "whos(${1:[Module},${2:] [pattern::Regex]})" },
{ "trigger": "edit", "contents": "edit(${1:file::String[},${2: line]})" },
{ "trigger": "edit", "contents": "edit(${1:function[},${2: types]})" },
{ "trigger": "less", "contents": "less(${1:file::String[},${2: line]})" },
{ "trigger": "less", "contents": "less(${1:function[},${2: types]})" },
{ "trigger": "clipboard", "contents": "clipboard(${1:x})" },
{ "trigger": "clipboard", "contents": "clipboard(${1:) -> Strin})" },
{ "trigger": "require", "contents": "require(${1:file::String...})" },
{ "trigger": "reload", "contents": "reload(${1:file::String})" },
{ "trigger": "include", "contents": "include(${1:path::String})" },
{ "trigger": "include_string", "contents": "include_string(${1:code::String})" },
{ "trigger": "help", "contents": "help(${1:name})" },
{ "trigger": "apropos", "contents": "apropos(${1:string})" },
{ "trigger": "which", "contents": "which(${1:f},${2: args...})" },
{ "trigger": "methods", "contents": "methods(${1:f})" },
{ "trigger": "methodswith", "contents": "methodswith(${1:typ[},${2: showparents]})" },
{ "trigger": "versioninfo", "contents": "versioninfo(${1:[verbose::Bool]})" },
{ "trigger": "is", "contents": "is(${1:x},${2: y})" },
{ "trigger": "isa", "contents": "isa(${1:x},${2: type})" },
{ "trigger": "isequal", "contents": "isequal(${1:x},${2: y})" },
{ "trigger": "isless", "contents": "isless(${1:x},${2: y})" },
{ "trigger": "ifelse", "contents": "ifelse(${1:condition::Bool},${2: x},${3: y})" },
{ "trigger": "lexcmp", "contents": "lexcmp(${1:x},${2: y})" },
{ "trigger": "lexless", "contents": "lexless(${1:x},${2: y})" },
{ "trigger": "typeof", "contents": "typeof(${1:x})" },
{ "trigger": "tuple", "contents": "tuple(${1:xs...})" },
{ "trigger": "ntuple", "contents": "ntuple(${1:n},${2: f::Function})" },
{ "trigger": "object_id", "contents": "object_id(${1:x})" },
{ "trigger": "hash", "contents": "hash(${1:x})" },
{ "trigger": "finalizer", "contents": "finalizer(${1:x},${2: function})" },
{ "trigger": "copy", "contents": "copy(${1:x})" },
{ "trigger": "deepcopy", "contents": "deepcopy(${1:x})" },
{ "trigger": "isdefined", "contents": "isdefined(${1:object},${2: index | symbol})" },
{ "trigger": "convert", "contents": "convert(${1:type},${2: x})" },
{ "trigger": "promote", "contents": "promote(${1:xs...})" },
{ "trigger": "oftype", "contents": "oftype(${1:x},${2: y})" },
{ "trigger": "identity", "contents": "identity(${1:x})" },
{ "trigger": "super", "contents": "super(${1:T::DataType})" },
{ "trigger": "issubtype", "contents": "issubtype(${1:type1},${2: type2})" },
{ "trigger": "subtypes", "contents": "subtypes(${1:T::DataType})" },
{ "trigger": "subtypetree", "contents": "subtypetree(${1:T::DataType})" },
{ "trigger": "typemin", "contents": "typemin(${1:type})" },
{ "trigger": "typemax", "contents": "typemax(${1:type})" },
{ "trigger": "realmin", "contents": "realmin(${1:type})" },
{ "trigger": "realmax", "contents": "realmax(${1:type})" },
{ "trigger": "maxintfloat", "contents": "maxintfloat(${1:type})" },
{ "trigger": "sizeof", "contents": "sizeof(${1:type})" },
{ "trigger": "eps", "contents": "eps(${1:[type]})" },
{ "trigger": "eps", "contents": "eps(${1:x})" },
{ "trigger": "promote_type", "contents": "promote_type(${1:type1},${2: type2})" },
{ "trigger": "promote_rule", "contents": "promote_rule(${1:type1},${2: type2})" },
{ "trigger": "getfield", "contents": "getfield(${1:value},${2: name::Symbol})" },
{ "trigger": "setfield", "contents": "setfield(${1:value},${2: name::Symbol},${3: x})" },
{ "trigger": "fieldoffsets", "contents": "fieldoffsets(${1:type})" },
{ "trigger": "fieldtype", "contents": "fieldtype(${1:value},${2: name::Symbol})" },
{ "trigger": "isimmutable", "contents": "isimmutable(${1:v})" },
{ "trigger": "isbits", "contents": "isbits(${1:T})" },
{ "trigger": "isleaftype", "contents": "isleaftype(${1:T})" },
{ "trigger": "typejoin", "contents": "typejoin(${1:T},${2: S})" },
{ "trigger": "typeintersect", "contents": "typeintersect(${1:T},${2: S})" },
{ "trigger": "apply", "contents": "apply(${1:f},${2: x...})" },
{ "trigger": "method_exists", "contents": "method_exists(${1:f},${2: tuple) -> Boo})" },
{ "trigger": "applicable", "contents": "applicable(${1:f},${2: args...})" },
{ "trigger": "invoke", "contents": "invoke(f, (${1:types...)},${2: args...})" },
{ "trigger": "eval", "contents": "eval(${1:expr::Expr})" },
{ "trigger": "evalfile", "contents": "evalfile(${1:path::String})" },
{ "trigger": "esc", "contents": "esc(${1:e::ANY})" },
{ "trigger": "gensym", "contents": "gensym(${1:[tag]})" },
{ "trigger": "parse", "contents": "parse(${1:str},${2: start; greedy=true},${3: raise=true})" },
{ "trigger": "parse", "contents": "parse(${1:str; raise=true})" },
{ "trigger": "start", "contents": "start(${1:iter) -> stat})" },
{ "trigger": "done", "contents": "done(${1:iter},${2: state) -> Boo})" },
{ "trigger": "next", "contents": "next(${1:iter},${2: state) -> item},${3: stat})" },
{ "trigger": "zip", "contents": "zip(${1:iters...})" },
{ "trigger": "enumerate", "contents": "enumerate(${1:iter})" },
{ "trigger": "isempty", "contents": "isempty(${1:collection) -> Boo})" },
{ "trigger": "empty!", "contents": "empty!(${1:collection) -> collectio})" },
{ "trigger": "length", "contents": "length(${1:collection) -> Intege})" },
{ "trigger": "endof", "contents": "endof(${1:collection) -> Intege})" },
{ "trigger": "in", "contents": "in(${1:item},${2: collection) -> Boo})" },
{ "trigger": "eltype", "contents": "eltype(${1:collection})" },
{ "trigger": "indexin", "contents": "indexin(${1:a},${2: b})" },
{ "trigger": "findin", "contents": "findin(${1:a},${2: b})" },
{ "trigger": "unique", "contents": "unique(${1:itr})" },
{ "trigger": "reduce", "contents": "reduce(${1:op},${2: v0},${3: itr})" },
{ "trigger": "foldl", "contents": "foldl(${1:op},${2: v0},${3: itr})" },
{ "trigger": "foldr", "contents": "foldr(${1:op},${2: v0},${3: itr})" },
{ "trigger": "maximum", "contents": "maximum(${1:itr})" },
{ "trigger": "maximum", "contents": "maximum(${1:A},${2: dims})" },
{ "trigger": "minimum", "contents": "minimum(${1:itr})" },
{ "trigger": "minimum", "contents": "minimum(${1:A},${2: dims})" },
{ "trigger": "indmax", "contents": "indmax(${1:itr) -> Intege})" },
{ "trigger": "indmin", "contents": "indmin(${1:itr) -> Intege})" },
{ "trigger": "findmax", "contents": "findmax(itr) -> (${1:x},${2: index})" },
{ "trigger": "findmin", "contents": "findmin(itr) -> (${1:x},${2: index})" },
{ "trigger": "sum", "contents": "sum(${1:itr})" },
{ "trigger": "sum", "contents": "sum(${1:A},${2: dims})" },
{ "trigger": "sum", "contents": "sum(${1:f},${2: itr})" },
{ "trigger": "prod", "contents": "prod(${1:itr})" },
{ "trigger": "prod", "contents": "prod(${1:A},${2: dims})" },
{ "trigger": "any", "contents": "any(${1:itr) -> Boo})" },
{ "trigger": "any", "contents": "any(${1:A},${2: dims})" },
{ "trigger": "all", "contents": "all(${1:itr) -> Boo})" },
{ "trigger": "all", "contents": "all(${1:A},${2: dims})" },
{ "trigger": "count", "contents": "count(${1:p},${2: itr) -> Intege})" },
{ "trigger": "any", "contents": "any(${1:p},${2: itr) -> Boo})" },
{ "trigger": "all", "contents": "all(${1:p},${2: itr) -> Boo})" },
{ "trigger": "map", "contents": "map(${1:f},${2: c...) -> collectio})" },
{ "trigger": "map!", "contents": "map!(${1:function},${2: collection})" },
{ "trigger": "mapreduce", "contents": "mapreduce(${1:f},${2: op},${3: itr})" },
{ "trigger": "first", "contents": "first(${1:coll})" },
{ "trigger": "last", "contents": "last(${1:coll})" },
{ "trigger": "step", "contents": "step(${1:r})" },
{ "trigger": "collect", "contents": "collect(${1:ion})" },
{ "trigger": "collect", "contents": "collect(${1:element_type},${2: ion})" },
{ "trigger": "issubset", "contents": "issubset(${1:a},${2: b})" },
{ "trigger": "filter", "contents": "filter(${1:function},${2: collection})" },
{ "trigger": "filter!", "contents": "filter!(${1:function},${2: collection})" },
{ "trigger": "getindex", "contents": "getindex(${1:collection},${2: key...})" },
{ "trigger": "setindex!", "contents": "setindex!(${1:collection},${2: value},${3: key...})" },
{ "trigger": "Dict", "contents": "Dict()" },
{ "trigger": "haskey", "contents": "haskey(${1:collection},${2: key})" },
{ "trigger": "get", "contents": "get(${1:collection},${2: key},${3: default})" },
{ "trigger": "getkey", "contents": "getkey(${1:collection},${2: key},${3: default})" },
{ "trigger": "delete!", "contents": "delete!(${1:collection},${2: key})" },
{ "trigger": "pop!", "contents": "pop!(${1:collection},${2: key[},${3: default]})" },
{ "trigger": "keys", "contents": "keys(${1:collection})" },
{ "trigger": "values", "contents": "values(${1:collection})" },
{ "trigger": "merge", "contents": "merge(${1:collection},${2: others...})" },
{ "trigger": "merge!", "contents": "merge!(${1:collection},${2: others...})" },
{ "trigger": "sizehint", "contents": "sizehint(${1:s},${2: n})" },
{ "trigger": "add!", "contents": "add!(${1:collection},${2: key})" },
{ "trigger": "Set", "contents": "Set(${1:x...})" },
{ "trigger": "IntSet", "contents": "IntSet(${1:i...})" },
{ "trigger": "union", "contents": "union(${1:s1},${2: s2...})" },
{ "trigger": "union!", "contents": "union!(${1:s},${2: iterable})" },
{ "trigger": "intersect", "contents": "intersect(${1:s1},${2: s2...})" },
{ "trigger": "setdiff", "contents": "setdiff(${1:s1},${2: s2})" },
{ "trigger": "setdiff!", "contents": "setdiff!(${1:s},${2: iterable})" },
{ "trigger": "symdiff", "contents": "symdiff(${1:s1},${2: s2...})" },
{ "trigger": "symdiff!", "contents": "symdiff!(${1:s},${2: n})" },
{ "trigger": "symdiff!", "contents": "symdiff!(${1:s},${2: itr})" },
{ "trigger": "symdiff!", "contents": "symdiff!(${1:s1},${2: s2})" },
{ "trigger": "complement", "contents": "complement(${1:s})" },
{ "trigger": "complement!", "contents": "complement!(${1:s})" },
{ "trigger": "intersect!", "contents": "intersect!(${1:s1},${2: s2})" },
{ "trigger": "issubset", "contents": "issubset(${1:A},${2: S) -> Boo})" },
{ "trigger": "push!", "contents": "push!(${1:collection},${2: items...) -> collectio})" },
{ "trigger": "pop!", "contents": "pop!(${1:collection) -> ite})" },
{ "trigger": "unshift!", "contents": "unshift!(${1:collection},${2: items...) -> collectio})" },
{ "trigger": "shift!", "contents": "shift!(${1:collection) -> ite})" },
{ "trigger": "insert!", "contents": "insert!(${1:collection},${2: index},${3: item})" },
{ "trigger": "deleteat!", "contents": "deleteat!(${1:collection},${2: index})" },
{ "trigger": "deleteat!", "contents": "deleteat!(${1:collection},${2: itr})" },
{ "trigger": "splice!", "contents": "splice!(${1:collection},${2: index[},${3: replacement]) -> ite})" },
{ "trigger": "splice!", "contents": "splice!(${1:collection},${2: range[},${3: replacement]) -> item})" },
{ "trigger": "resize!", "contents": "resize!(${1:collection},${2: n) -> collectio})" },
{ "trigger": "append!", "contents": "append!(${1:collection},${2: items) -> collection})" },
{ "trigger": "prepend!", "contents": "prepend!(${1:collection},${2: items) -> collectio})" },
{ "trigger": "length", "contents": "length(${1:s})" },
{ "trigger": "sizeof", "contents": "sizeof(${1:s::String})" },
{ "trigger": "string", "contents": "string(${1:xs...})" },
{ "trigger": "repr", "contents": "repr(${1:x})" },
{ "trigger": "bytestring", "contents": "bytestring(${1:::Ptr{Uint8}})" },
{ "trigger": "bytestring", "contents": "bytestring(${1:s})" },
{ "trigger": "ascii", "contents": "ascii(${1:::Array{Uint8},${2: 1}})" },
{ "trigger": "ascii", "contents": "ascii(${1:s})" },
{ "trigger": "utf8", "contents": "utf8(${1:::Array{Uint8},${2: 1}})" },
{ "trigger": "utf8", "contents": "utf8(${1:s})" },
{ "trigger": "normalize_string", "contents": "normalize_string(${1:s},${2: normalform::Symbol})" },
{ "trigger": "is_valid_ascii", "contents": "is_valid_ascii(${1:s) -> Boo})" },
{ "trigger": "is_valid_utf8", "contents": "is_valid_utf8(${1:s) -> Boo})" },
{ "trigger": "is_valid_char", "contents": "is_valid_char(${1:c) -> Boo})" },
{ "trigger": "is_assigned_char", "contents": "is_assigned_char(${1:c) -> Boo})" },
{ "trigger": "ismatch", "contents": "ismatch(${1:r::Regex},${2: s::String) -> Boo})" },
{ "trigger": "match", "contents": "match(${1:r::Regex},${2: s::String[},${3: idx::Integer[},${4: addopts]]})" },
{ "trigger": "eachmatch", "contents": "eachmatch(${1:r::Regex},${2: s::String[},${3: overlap::Bool=false]})" },
{ "trigger": "matchall", "contents": "matchall(${1:r::Regex},${2: s::String[},${3: overlap::Bool=false]) -> Vector{String})" },
{ "trigger": "lpad", "contents": "lpad(${1:string},${2: n},${3: p})" },
{ "trigger": "rpad", "contents": "rpad(${1:string},${2: n},${3: p})" },
{ "trigger": "search", "contents": "search(${1:string},${2: chars[},${3: start]})" },
{ "trigger": "rsearch", "contents": "rsearch(${1:string},${2: chars[},${3: start]})" },
{ "trigger": "searchindex", "contents": "searchindex(${1:string},${2: substring[},${3: start]})" },
{ "trigger": "rsearchindex", "contents": "rsearchindex(${1:string},${2: substring[},${3: start]})" },
{ "trigger": "contains", "contents": "contains(${1:haystack},${2: needle})" },
{ "trigger": "replace", "contents": "replace(${1:string},${2: pat},${3: r[},${4: n]})" },
{ "trigger": "split", "contents": "split(${1:string},${2: [chars},${3: [limit},${4:] [include_empty]]})" },
{ "trigger": "rsplit", "contents": "rsplit(${1:string},${2: [chars},${3: [limit},${4:] [include_empty]]})" },
{ "trigger": "strip", "contents": "strip(${1:string[},${2: chars]})" },
{ "trigger": "lstrip", "contents": "lstrip(${1:string[},${2: chars]})" },
{ "trigger": "rstrip", "contents": "rstrip(${1:string[},${2: chars]})" },
{ "trigger": "beginswith", "contents": "beginswith(${1:string},${2: prefix})" },
{ "trigger": "endswith", "contents": "endswith(${1:string},${2: suffix})" },
{ "trigger": "uppercase", "contents": "uppercase(${1:string})" },
{ "trigger": "lowercase", "contents": "lowercase(${1:string})" },
{ "trigger": "ucfirst", "contents": "ucfirst(${1:string})" },
{ "trigger": "lcfirst", "contents": "lcfirst(${1:string})" },
{ "trigger": "join", "contents": "join(${1:strings},${2: delim})" },
{ "trigger": "chop", "contents": "chop(${1:string})" },
{ "trigger": "chomp", "contents": "chomp(${1:string})" },
{ "trigger": "ind2chr", "contents": "ind2chr(${1:string},${2: i})" },
{ "trigger": "chr2ind", "contents": "chr2ind(${1:string},${2: i})" },
{ "trigger": "isvalid", "contents": "isvalid(${1:str},${2: i})" },
{ "trigger": "nextind", "contents": "nextind(${1:str},${2: i})" },
{ "trigger": "prevind", "contents": "prevind(${1:str},${2: i})" },
{ "trigger": "randstring", "contents": "randstring(${1:len})" },
{ "trigger": "charwidth", "contents": "charwidth(${1:c})" },
{ "trigger": "strwidth", "contents": "strwidth(${1:s})" },
{ "trigger": "isalnum", "contents": "isalnum(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isalpha", "contents": "isalpha(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isascii", "contents": "isascii(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isblank", "contents": "isblank(c::Union(${1:Char},${2: String)})" },
{ "trigger": "iscntrl", "contents": "iscntrl(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isdigit", "contents": "isdigit(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isgraph", "contents": "isgraph(c::Union(${1:Char},${2: String)})" },
{ "trigger": "islower", "contents": "islower(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isprint", "contents": "isprint(c::Union(${1:Char},${2: String)})" },
{ "trigger": "ispunct", "contents": "ispunct(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isspace", "contents": "isspace(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isupper", "contents": "isupper(c::Union(${1:Char},${2: String)})" },
{ "trigger": "isxdigit", "contents": "isxdigit(c::Union(${1:Char},${2: String)})" },
{ "trigger": "symbol", "contents": "symbol(${1:str})" },
{ "trigger": "escape_string", "contents": "escape_string(${1:str::String) -> Strin})" },
{ "trigger": "unescape_string", "contents": "unescape_string(${1:s::String) -> Strin})" },
{ "trigger": "STDOUT", "contents": "STDOUT" },
{ "trigger": "STDERR", "contents": "STDERR" },
{ "trigger": "STDIN", "contents": "STDIN" },
{ "trigger": "open", "contents": "open(${1:file_name[},${2: read},${3: write},${4: create},${5: truncate},${6: append]) -> IOStrea})" },
{ "trigger": "open", "contents": "open(${1:file_name[},${2: mode]) -> IOStrea})" },
{ "trigger": "open", "contents": "open(${1:f::function},${2: args...})" },
{ "trigger": "IOBuffer", "contents": "IOBuffer(${1:) ->})" },
{ "trigger": "IOBuffer", "contents": "IOBuffer(${1:size::Int})" },
{ "trigger": "IOBuffer", "contents": "IOBuffer(${1:string})" },
{ "trigger": "IOBuffer", "contents": "IOBuffer(${1:[data][},${2: readable},${3: writable[},${4: maxsize]]})" },
{ "trigger": "takebuf_array", "contents": "takebuf_array(${1:b::IOBuffer})" },
{ "trigger": "takebuf_string", "contents": "takebuf_string(${1:b::IOBuffer})" },
{ "trigger": "fdio", "contents": "fdio(${1:[name::String]},${2: fd::Integer[},${3: own::Bool]) -> IOStrea})" },
{ "trigger": "flush", "contents": "flush(${1:stream})" },
{ "trigger": "flush_cstdio", "contents": "flush_cstdio()" },
{ "trigger": "close", "contents": "close(${1:stream})" },
{ "trigger": "write", "contents": "write(${1:stream},${2: x})" },
{ "trigger": "read", "contents": "read(${1:stream},${2: type})" },
{ "trigger": "read", "contents": "read(${1:stream},${2: type},${3: dims})" },
{ "trigger": "readbytes!", "contents": "readbytes!(stream, b::Vector{Uint8}, nb=length(${1:b)})" },
{ "trigger": "readbytes", "contents": "readbytes(stream, nb=typemax(${1:Int)})" },
{ "trigger": "position", "contents": "position(${1:s})" },
{ "trigger": "seek", "contents": "seek(${1:s},${2: pos})" },
{ "trigger": "seekstart", "contents": "seekstart(${1:s})" },
{ "trigger": "seekend", "contents": "seekend(${1:s})" },
{ "trigger": "skip", "contents": "skip(${1:s},${2: offset})" },
{ "trigger": "eof", "contents": "eof(${1:stream})" },
{ "trigger": "isreadonly", "contents": "isreadonly(${1:stream})" },
{ "trigger": "isopen", "contents": "isopen(${1:stream})" },
{ "trigger": "ntoh", "contents": "ntoh(${1:x})" },
{ "trigger": "hton", "contents": "hton(${1:x})" },
{ "trigger": "ltoh", "contents": "ltoh(${1:x})" },
{ "trigger": "htol", "contents": "htol(${1:x})" },
{ "trigger": "ENDIAN_BOM", "contents": "ENDIAN_BOM" },
{ "trigger": "serialize", "contents": "serialize(${1:stream},${2: value})" },
{ "trigger": "deserialize", "contents": "deserialize(${1:stream})" },
{ "trigger": "print_escaped", "contents": "print_escaped(${1:io},${2: str::String},${3: esc::String})" },
{ "trigger": "print_unescaped", "contents": "print_unescaped(${1:io},${2: s::String})" },
{ "trigger": "print_joined", "contents": "print_joined(${1:io},${2: items},${3: delim[},${4: last]})" },
{ "trigger": "print_shortest", "contents": "print_shortest(${1:io},${2: x})" },
{ "trigger": "fd", "contents": "fd(${1:stream})" },
{ "trigger": "redirect_stdout", "contents": "redirect_stdout()" },
{ "trigger": "redirect_stdout", "contents": "redirect_stdout(${1:stream})" },
{ "trigger": "redirect_stderr", "contents": "redirect_stderr(${1:[stream]})" },
{ "trigger": "redirect_stdin", "contents": "redirect_stdin(${1:[stream]})" },
{ "trigger": "readchomp", "contents": "readchomp(${1:x})" },
{ "trigger": "readdir", "contents": "readdir(${1:[dir]) -> Vector{ByteString})" },
{ "trigger": "truncate", "contents": "truncate(${1:file},${2: n})" },
{ "trigger": "skipchars", "contents": "skipchars(${1:stream},${2: predicate; linecomment::Char})" },
{ "trigger": "countlines", "contents": "countlines(${1:io[},${2: eol::Char]})" },
{ "trigger": "PipeBuffer", "contents": "PipeBuffer()" },
{ "trigger": "PipeBuffer", "contents": "PipeBuffer(${1:data::Vector{Uint8}[},${2: maxsize]})" },
{ "trigger": "readavailable", "contents": "readavailable(${1:stream})" },
{ "trigger": "stat", "contents": "stat(${1:file})" },
{ "trigger": "lstat", "contents": "lstat(${1:file})" },
{ "trigger": "ctime", "contents": "ctime(${1:file})" },
{ "trigger": "mtime", "contents": "mtime(${1:file})" },
{ "trigger": "filemode", "contents": "filemode(${1:file})" },
{ "trigger": "filesize", "contents": "filesize(${1:path...})" },
{ "trigger": "uperm", "contents": "uperm(${1:file})" },
{ "trigger": "gperm", "contents": "gperm(${1:file})" },
{ "trigger": "operm", "contents": "operm(${1:file})" },
{ "trigger": "cp", "contents": "cp(${1:src::String},${2: dst::String})" },
{ "trigger": "download", "contents": "download(${1:url[},${2: localfile]})" },
{ "trigger": "mv", "contents": "mv(${1:src::String},${2: dst::String})" },
{ "trigger": "rm", "contents": "rm(${1:path::String})" },
{ "trigger": "touch", "contents": "touch(${1:path::String})" },
{ "trigger": "connect", "contents": "connect(${1:[host]},${2: port) -> TcpSocke})" },
{ "trigger": "connect", "contents": "connect(${1:path) -> Pip})" },
{ "trigger": "listen", "contents": "listen(${1:[addr]},${2: port) -> TcpServe})" },
{ "trigger": "listen", "contents": "listen(${1:path) -> PipeServe})" },
{ "trigger": "getaddrinfo", "contents": "getaddrinfo(${1:host})" },
{ "trigger": "parseip", "contents": "parseip(${1:addr})" },
{ "trigger": "IPv4", "contents": "IPv4(${1:host::Integer) ->})" },
{ "trigger": "IPv6", "contents": "IPv6(${1:host::Integer) ->})" },
{ "trigger": "nb_available", "contents": "nb_available(${1:stream})" },
{ "trigger": "accept", "contents": "accept(${1:server[},${2: client]})" },
{ "trigger": "listenany", "contents": "listenany(port_hint) -> (${1:Uint16},${2: TcpServer})" },
{ "trigger": "watch_file", "contents": "watch_file(${1:cb=false},${2: s; poll=false})" },
{ "trigger": "poll_fd", "contents": "poll_fd(${1:fd},${2: seconds::Real; readable=false},${3: writable=false})" },
{ "trigger": "poll_file", "contents": "poll_file(${1:s},${2: interval_seconds::Real},${3: seconds::Real})" },
{ "trigger": "show", "contents": "show(${1:x})" },
{ "trigger": "showcompact", "contents": "showcompact(${1:x})" },
{ "trigger": "showall", "contents": "showall(${1:x})" },
{ "trigger": "summary", "contents": "summary(${1:x})" },
{ "trigger": "print", "contents": "print(${1:x})" },
{ "trigger": "println", "contents": "println(${1:x})" },
{ "trigger": "print_with_color", "contents": "print_with_color(${1:color::Symbol[},${2: io]},${3: strings...})" },
{ "trigger": "info", "contents": "info(${1:msg})" },
{ "trigger": "warn", "contents": "warn(${1:msg})" },
{ "trigger": "sprint", "contents": "sprint(${1:f::Function},${2: args...})" },
{ "trigger": "showerror", "contents": "showerror(${1:io},${2: e})" },
{ "trigger": "dump", "contents": "dump(${1:x})" },
{ "trigger": "xdump", "contents": "xdump(${1:x})" },
{ "trigger": "readall", "contents": "readall(${1:stream})" },
{ "trigger": "readline", "contents": "readline(${1:stream=STDIN})" },
{ "trigger": "readuntil", "contents": "readuntil(${1:stream},${2: delim})" },
{ "trigger": "readlines", "contents": "readlines(${1:stream})" },
{ "trigger": "eachline", "contents": "eachline(${1:stream})" },
{ "trigger": "readdlm", "contents": "readdlm(${1:source},${2: delim::Char},${3: T::Type},${4: eol::Char; has_header=false},${5: use_mmap=false},${6: ignore_invalid_chars=false})" },
{ "trigger": "readdlm", "contents": "readdlm(${1:source},${2: delim::Char},${3: eol::Char; options...})" },
{ "trigger": "readdlm", "contents": "readdlm(${1:source},${2: delim::Char},${3: T::Type; options...})" },
{ "trigger": "readdlm", "contents": "readdlm(${1:source},${2: delim::Char; options...})" },
{ "trigger": "readdlm", "contents": "readdlm(${1:source},${2: T::Type; options...})" },
{ "trigger": "readdlm", "contents": "readdlm(${1:source; options...})" },
{ "trigger": "writedlm", "contents": "writedlm(${1:f},${2: A},${3: delim='t'})" },
{ "trigger": "readcsv", "contents": "readcsv(${1:source},${2: [T::Type]; options...})" },
{ "trigger": "writecsv", "contents": "writecsv(${1:filename},${2: A})" },
{ "trigger": "Base64Pipe", "contents": "Base64Pipe(${1:ostream})" },
{ "trigger": "base64", "contents": "base64(${1:writefunc},${2: args...})" },
{ "trigger": "display", "contents": "display(${1:x})" },
{ "trigger": "redisplay", "contents": "redisplay(${1:x})" },
{ "trigger": "displayable", "contents": "displayable(${1:mime})" },
{ "trigger": "writemime", "contents": "writemime(${1:stream},${2: mime},${3: x})" },
{ "trigger": "mimewritable", "contents": "mimewritable(${1:mime},${2: x})" },
{ "trigger": "reprmime", "contents": "reprmime(${1:mime},${2: x})" },
{ "trigger": "stringmime", "contents": "stringmime(${1:mime},${2: x})" },
{ "trigger": "pushdisplay", "contents": "pushdisplay(${1:d::Display})" },
{ "trigger": "popdisplay", "contents": "popdisplay()" },
{ "trigger": "TextDisplay", "contents": "TextDisplay(${1:stream})" },
{ "trigger": "istext", "contents": "istext(${1:m::MIME})" },
{ "trigger": "mmap_array", "contents": "mmap_array(${1:type},${2: dims},${3: stream[},${4: offset]})" },
{ "trigger": "mmap_bitarray", "contents": "mmap_bitarray(${1:[type]},${2: dims},${3: stream[},${4: offset]})" },
{ "trigger": "msync", "contents": "msync(${1:array})" },
{ "trigger": "msync", "contents": "msync(${1:ptr},${2: len[},${3: flags]})" },
{ "trigger": "MS_ASYNC", "contents": "MS_ASYNC" },
{ "trigger": "MS_SYNC", "contents": "MS_SYNC" },
{ "trigger": "MS_INVALIDATE", "contents": "MS_INVALIDATE" },
{ "trigger": "mmap", "contents": "mmap(${1:len},${2: prot},${3: flags},${4: fd},${5: offset})" },
{ "trigger": "munmap", "contents": "munmap(${1:pointer},${2: len})" },
{ "trigger": "div", "contents": "div(${1:a},${2: b})" },
{ "trigger": "fld", "contents": "fld(${1:a},${2: b})" },
{ "trigger": "mod", "contents": "mod(${1:x},${2: m})" },
{ "trigger": "mod2pi", "contents": "mod2pi(${1:x})" },
{ "trigger": "rem", "contents": "rem(${1:x},${2: m})" },
{ "trigger": "divrem", "contents": "divrem(${1:x},${2: y})" },
{ "trigger": "mod1", "contents": "mod1(${1:x},${2: m})" },
{ "trigger": "rem1", "contents": "rem1(${1:x},${2: m})" },
{ "trigger": "rationalize", "contents": "rationalize(${1:[Type]},${2: x})" },
{ "trigger": "num", "contents": "num(${1:x})" },
{ "trigger": "den", "contents": "den(${1:x})" },
{ "trigger": ":", "contents": ":(${1:start[},${2: step]},${3: stop})" },
{ "trigger": "colon", "contents": "colon(${1:start[},${2: step]},${3: stop})" },
{ "trigger": "==", "contents": "==(${1:x},${2: y})" },
{ "trigger": "!=", "contents": "!=(${1:x},${2: y})" },
{ "trigger": "===", "contents": "===(${1:x},${2: y})" },
{ "trigger": "!==", "contents": "!==(${1:x},${2: y})" },
{ "trigger": ".==", "contents": ".==(${1:x},${2: y})" },
{ "trigger": ".!=", "contents": ".!=(${1:x},${2: y})" },
{ "trigger": "cmp", "contents": "cmp(${1:x},${2: y})" },
{ "trigger": "~", "contents": "~(${1:x})" },
{ "trigger": "!", "contents": "!(${1:x})" },
{ "trigger": "A_ldiv_Bc", "contents": "A_ldiv_Bc(${1:a},${2: b})" },
{ "trigger": "A_ldiv_Bt", "contents": "A_ldiv_Bt(${1:a},${2: b})" },
{ "trigger": "A_mul_B", "contents": "A_mul_B(${1:...})" },
{ "trigger": "A_mul_Bc", "contents": "A_mul_Bc(${1:...})" },
{ "trigger": "A_mul_Bt", "contents": "A_mul_Bt(${1:...})" },
{ "trigger": "A_rdiv_Bc", "contents": "A_rdiv_Bc(${1:...})" },
{ "trigger": "A_rdiv_Bt", "contents": "A_rdiv_Bt(${1:a},${2: b})" },
{ "trigger": "Ac_ldiv_B", "contents": "Ac_ldiv_B(${1:...})" },
{ "trigger": "Ac_ldiv_Bc", "contents": "Ac_ldiv_Bc(${1:...})" },
{ "trigger": "Ac_mul_B", "contents": "Ac_mul_B(${1:...})" },
{ "trigger": "Ac_mul_Bc", "contents": "Ac_mul_Bc(${1:...})" },
{ "trigger": "Ac_rdiv_B", "contents": "Ac_rdiv_B(${1:a},${2: b})" },
{ "trigger": "Ac_rdiv_Bc", "contents": "Ac_rdiv_Bc(${1:a},${2: b})" },
{ "trigger": "At_ldiv_B", "contents": "At_ldiv_B(${1:...})" },
{ "trigger": "At_ldiv_Bt", "contents": "At_ldiv_Bt(${1:...})" },
{ "trigger": "At_mul_B", "contents": "At_mul_B(${1:...})" },
{ "trigger": "At_mul_Bt", "contents": "At_mul_Bt(${1:...})" },
{ "trigger": "At_rdiv_B", "contents": "At_rdiv_B(${1:a},${2: b})" },
{ "trigger": "At_rdiv_Bt", "contents": "At_rdiv_Bt(${1:a},${2: b})" },
{ "trigger": "isapprox", "contents": "isapprox(x::Number, y::Number; rtol::Real=cbrt(maxeps), atol::Real=sqrt(${1:maxeps)})" },
{ "trigger": "sin", "contents": "sin(${1:x})" },
{ "trigger": "cos", "contents": "cos(${1:x})" },
{ "trigger": "tan", "contents": "tan(${1:x})" },
{ "trigger": "sind", "contents": "sind(${1:x})" },
{ "trigger": "cosd", "contents": "cosd(${1:x})" },
{ "trigger": "tand", "contents": "tand(${1:x})" },
{ "trigger": "sinpi", "contents": "sinpi(${1:x})" },
{ "trigger": "cospi", "contents": "cospi(${1:x})" },
{ "trigger": "sinh", "contents": "sinh(${1:x})" },
{ "trigger": "cosh", "contents": "cosh(${1:x})" },
{ "trigger": "tanh", "contents": "tanh(${1:x})" },
{ "trigger": "asin", "contents": "asin(${1:x})" },
{ "trigger": "acos", "contents": "acos(${1:x})" },
{ "trigger": "atan", "contents": "atan(${1:x})" },
{ "trigger": "atan2", "contents": "atan2(${1:y},${2: x})" },
{ "trigger": "asind", "contents": "asind(${1:x})" },
{ "trigger": "acosd", "contents": "acosd(${1:x})" },
{ "trigger": "atand", "contents": "atand(${1:x})" },
{ "trigger": "sec", "contents": "sec(${1:x})" },
{ "trigger": "csc", "contents": "csc(${1:x})" },
{ "trigger": "cot", "contents": "cot(${1:x})" },
{ "trigger": "secd", "contents": "secd(${1:x})" },
{ "trigger": "cscd", "contents": "cscd(${1:x})" },
{ "trigger": "cotd", "contents": "cotd(${1:x})" },
{ "trigger": "asec", "contents": "asec(${1:x})" },
{ "trigger": "acsc", "contents": "acsc(${1:x})" },
{ "trigger": "acot", "contents": "acot(${1:x})" },
{ "trigger": "asecd", "contents": "asecd(${1:x})" },
{ "trigger": "acscd", "contents": "acscd(${1:x})" },
{ "trigger": "acotd", "contents": "acotd(${1:x})" },
{ "trigger": "sech", "contents": "sech(${1:x})" },
{ "trigger": "csch", "contents": "csch(${1:x})" },
{ "trigger": "coth", "contents": "coth(${1:x})" },
{ "trigger": "asinh", "contents": "asinh(${1:x})" },
{ "trigger": "acosh", "contents": "acosh(${1:x})" },
{ "trigger": "atanh", "contents": "atanh(${1:x})" },
{ "trigger": "asech", "contents": "asech(${1:x})" },
{ "trigger": "acsch", "contents": "acsch(${1:x})" },
{ "trigger": "acoth", "contents": "acoth(${1:x})" },
{ "trigger": "sinc", "contents": "sinc(${1:x})" },
{ "trigger": "cosc", "contents": "cosc(${1:x})" },
{ "trigger": "deg2rad", "contents": "deg2rad(${1:x})" },
{ "trigger": "rad2deg", "contents": "rad2deg(${1:x})" },
{ "trigger": "hypot", "contents": "hypot(${1:x},${2: y})" },
{ "trigger": "log", "contents": "log(${1:x})" },
{ "trigger": "log", "contents": "log(${1:b},${2: x})" },
{ "trigger": "log2", "contents": "log2(${1:x})" },
{ "trigger": "log10", "contents": "log10(${1:x})" },
{ "trigger": "log1p", "contents": "log1p(${1:x})" },
{ "trigger": "frexp", "contents": "frexp(${1:val})" },
{ "trigger": "exp", "contents": "exp(${1:x})" },
{ "trigger": "exp2", "contents": "exp2(${1:x})" },
{ "trigger": "exp10", "contents": "exp10(${1:x})" },
{ "trigger": "ldexp", "contents": "ldexp(${1:x},${2: n})" },
{ "trigger": "modf", "contents": "modf(${1:x})" },
{ "trigger": "expm1", "contents": "expm1(${1:x})" },
{ "trigger": "round", "contents": "round(${1:x[},${2: digits[},${3: base]]})" },
{ "trigger": "ceil", "contents": "ceil(${1:x[},${2: digits[},${3: base]]})" },
{ "trigger": "floor", "contents": "floor(${1:x[},${2: digits[},${3: base]]})" },
{ "trigger": "trunc", "contents": "trunc(${1:x[},${2: digits[},${3: base]]})" },
{ "trigger": "iround", "contents": "iround(${1:x) -> Intege})" },
{ "trigger": "iceil", "contents": "iceil(${1:x) -> Intege})" },
{ "trigger": "ifloor", "contents": "ifloor(${1:x) -> Intege})" },
{ "trigger": "itrunc", "contents": "itrunc(${1:x) -> Intege})" },
{ "trigger": "signif", "contents": "signif(${1:x},${2: digits[},${3: base]})" },
{ "trigger": "min", "contents": "min(${1:x},${2: y},${3: ...})" },
{ "trigger": "max", "contents": "max(${1:x},${2: y},${3: ...})" },
{ "trigger": "clamp", "contents": "clamp(${1:x},${2: lo},${3: hi})" },
{ "trigger": "abs", "contents": "abs(${1:x})" },
{ "trigger": "abs2", "contents": "abs2(${1:x})" },
{ "trigger": "copysign", "contents": "copysign(${1:x},${2: y})" },
{ "trigger": "sign", "contents": "sign(${1:x})" },
{ "trigger": "signbit", "contents": "signbit(${1:x})" },
{ "trigger": "flipsign", "contents": "flipsign(${1:x},${2: y})" },
{ "trigger": "sqrt", "contents": "sqrt(${1:x})" },
{ "trigger": "isqrt", "contents": "isqrt(${1:n})" },
{ "trigger": "cbrt", "contents": "cbrt(${1:x})" },
{ "trigger": "erf", "contents": "erf(${1:x})" },
{ "trigger": "erfc", "contents": "erfc(${1:x})" },
{ "trigger": "erfcx", "contents": "erfcx(${1:x})" },
{ "trigger": "erfi", "contents": "erfi(${1:x})" },
{ "trigger": "dawson", "contents": "dawson(${1:x})" },
{ "trigger": "erfinv", "contents": "erfinv(${1:x})" },
{ "trigger": "erfcinv", "contents": "erfcinv(${1:x})" },
{ "trigger": "real", "contents": "real(${1:z})" },
{ "trigger": "imag", "contents": "imag(${1:z})" },
{ "trigger": "reim", "contents": "reim(${1:z})" },
{ "trigger": "conj", "contents": "conj(${1:z})" },
{ "trigger": "angle", "contents": "angle(${1:z})" },
{ "trigger": "cis", "contents": "cis(${1:z})" },
{ "trigger": "binomial", "contents": "binomial(${1:n},${2: k})" },
{ "trigger": "factorial", "contents": "factorial(${1:n})" },
{ "trigger": "factorial", "contents": "factorial(${1:n},${2: k})" },
{ "trigger": "factor", "contents": "factor(${1:n})" },
{ "trigger": "gcd", "contents": "gcd(${1:x},${2: y})" },
{ "trigger": "lcm", "contents": "lcm(${1:x},${2: y})" },
{ "trigger": "gcdx", "contents": "gcdx(${1:x},${2: y})" },
{ "trigger": "ispow2", "contents": "ispow2(${1:n})" },
{ "trigger": "nextpow2", "contents": "nextpow2(${1:n})" },
{ "trigger": "prevpow2", "contents": "prevpow2(${1:n})" },
{ "trigger": "nextpow", "contents": "nextpow(${1:a},${2: x})" },
{ "trigger": "prevpow", "contents": "prevpow(${1:a},${2: x})" },
{ "trigger": "nextprod", "contents": "nextprod(${1:[k_1},${2: k_2},${3: ...]},${4: n})" },
{ "trigger": "prevprod", "contents": "prevprod(${1:[k_1},${2: k_2},${3: ...]},${4: n})" },
{ "trigger": "invmod", "contents": "invmod(${1:x},${2: m})" },
{ "trigger": "powermod", "contents": "powermod(${1:x},${2: p},${3: m})" },
{ "trigger": "gamma", "contents": "gamma(${1:x})" },
{ "trigger": "lgamma", "contents": "lgamma(${1:x})" },
{ "trigger": "lfact", "contents": "lfact(${1:x})" },
{ "trigger": "digamma", "contents": "digamma(${1:x})" },
{ "trigger": "invdigamma", "contents": "invdigamma(${1:x})" },
{ "trigger": "trigamma", "contents": "trigamma(${1:x})" },
{ "trigger": "polygamma", "contents": "polygamma(${1:m},${2: x})" },
{ "trigger": "airy", "contents": "airy(${1:k},${2: x})" },
{ "trigger": "airyai", "contents": "airyai(${1:x})" },
{ "trigger": "airyprime", "contents": "airyprime(${1:x})" },
{ "trigger": "airyaiprime", "contents": "airyaiprime(${1:x})" },
{ "trigger": "airybi", "contents": "airybi(${1:x})" },
{ "trigger": "airybiprime", "contents": "airybiprime(${1:x})" },
{ "trigger": "besselj0", "contents": "besselj0(${1:x})" },
{ "trigger": "besselj1", "contents": "besselj1(${1:x})" },
{ "trigger": "besselj", "contents": "besselj(${1:nu},${2: x})" },
{ "trigger": "bessely0", "contents": "bessely0(${1:x})" },
{ "trigger": "bessely1", "contents": "bessely1(${1:x})" },
{ "trigger": "bessely", "contents": "bessely(${1:nu},${2: x})" },
{ "trigger": "hankelh1", "contents": "hankelh1(${1:nu},${2: x})" },
{ "trigger": "hankelh2", "contents": "hankelh2(${1:nu},${2: x})" },
{ "trigger": "besselh", "contents": "besselh(${1:nu},${2: k},${3: x})" },
{ "trigger": "besseli", "contents": "besseli(${1:nu},${2: x})" },
{ "trigger": "besselk", "contents": "besselk(${1:nu},${2: x})" },
{ "trigger": "beta", "contents": "beta(${1:x},${2: y})" },
{ "trigger": "lbeta", "contents": "lbeta(${1:x},${2: y})" },
{ "trigger": "eta", "contents": "eta(${1:x})" },
{ "trigger": "zeta", "contents": "zeta(${1:x})" },
{ "trigger": "bitmix", "contents": "bitmix(${1:x},${2: y})" },
{ "trigger": "ndigits", "contents": "ndigits(${1:n},${2: b})" },
{ "trigger": "bin", "contents": "bin(${1:n[},${2: pad]})" },
{ "trigger": "hex", "contents": "hex(${1:n[},${2: pad]})" },
{ "trigger": "dec", "contents": "dec(${1:n[},${2: pad]})" },
{ "trigger": "oct", "contents": "oct(${1:n[},${2: pad]})" },
{ "trigger": "base", "contents": "base(${1:},${2: n[},${3: pad]})" },
{ "trigger": "digits", "contents": "digits(${1:n[},${2: base][},${3: pad]})" },
{ "trigger": "bits", "contents": "bits(${1:n})" },
{ "trigger": "parseint", "contents": "parseint(${1:[type]},${2: str[},${3: base]})" },
{ "trigger": "parsefloat", "contents": "parsefloat(${1:[type]},${2: str})" },
{ "trigger": "big", "contents": "big(${1:x})" },
{ "trigger": "bool", "contents": "bool(${1:x})" },
{ "trigger": "int", "contents": "int(${1:x})" },
{ "trigger": "uint", "contents": "uint(${1:x})" },
{ "trigger": "integer", "contents": "integer(${1:x})" },
{ "trigger": "signed", "contents": "signed(${1:x})" },
{ "trigger": "unsigned", "contents": "unsigned(${1:x})" },
{ "trigger": "int8", "contents": "int8(${1:x})" },
{ "trigger": "int16", "contents": "int16(${1:x})" },
{ "trigger": "int32", "contents": "int32(${1:x})" },
{ "trigger": "int64", "contents": "int64(${1:x})" },
{ "trigger": "int128", "contents": "int128(${1:x})" },
{ "trigger": "uint8", "contents": "uint8(${1:x})" },
{ "trigger": "uint16", "contents": "uint16(${1:x})" },
{ "trigger": "uint32", "contents": "uint32(${1:x})" },
{ "trigger": "uint64", "contents": "uint64(${1:x})" },
{ "trigger": "uint128", "contents": "uint128(${1:x})" },
{ "trigger": "float16", "contents": "float16(${1:x})" },
{ "trigger": "float32", "contents": "float32(${1:x})" },
{ "trigger": "float64", "contents": "float64(${1:x})" },
{ "trigger": "float32_isvalid", "contents": "float32_isvalid(${1:x},${2: out::Vector{Float32}) -> Boo})" },
{ "trigger": "float64_isvalid", "contents": "float64_isvalid(${1:x},${2: out::Vector{Float64}) -> Boo})" },
{ "trigger": "float", "contents": "float(${1:x})" },
{ "trigger": "significand", "contents": "significand(${1:x})" },
{ "trigger": "exponent", "contents": "exponent(${1:x) -> In})" },
{ "trigger": "complex64", "contents": "complex64(${1:r},${2: i})" },
{ "trigger": "complex128", "contents": "complex128(${1:r},${2: i})" },
{ "trigger": "char", "contents": "char(${1:x})" },
{ "trigger": "complex", "contents": "complex(${1:r},${2: i})" },
{ "trigger": "bswap", "contents": "bswap(${1:n})" },
{ "trigger": "num2hex", "contents": "num2hex(${1:f})" },
{ "trigger": "hex2num", "contents": "hex2num(${1:str})" },
{ "trigger": "hex2bytes", "contents": "hex2bytes(${1:s::ASCIIString})" },
{ "trigger": "bytes2hex", "contents": "bytes2hex(${1:bin_arr::Array{Uint8},${2: 1}})" },
{ "trigger": "one", "contents": "one(${1:x})" },
{ "trigger": "zero", "contents": "zero(${1:x})" },
{ "trigger": "pi", "contents": "pi" },
{ "trigger": "im", "contents": "im" },
{ "trigger": "e", "contents": "e" },
{ "trigger": "catalan", "contents": "catalan" },
{ "trigger": "Inf", "contents": "Inf" },
{ "trigger": "Inf32", "contents": "Inf32" },
{ "trigger": "Inf16", "contents": "Inf16" },
{ "trigger": "NaN", "contents": "NaN" },
{ "trigger": "NaN32", "contents": "NaN32" },
{ "trigger": "NaN16", "contents": "NaN16" },
{ "trigger": "issubnormal", "contents": "issubnormal(${1:f) -> Boo})" },
{ "trigger": "isfinite", "contents": "isfinite(${1:f) -> Boo})" },
{ "trigger": "isinf", "contents": "isinf(${1:f})" },
{ "trigger": "isnan", "contents": "isnan(${1:f})" },
{ "trigger": "inf", "contents": "inf(${1:f})" },
{ "trigger": "nan", "contents": "nan(${1:f})" },
{ "trigger": "nextfloat", "contents": "nextfloat(${1:f})" },
{ "trigger": "prevfloat", "contents": "prevfloat(${1:f) -> Floa})" },
{ "trigger": "isinteger", "contents": "isinteger(${1:x})" },
{ "trigger": "isreal", "contents": "isreal(${1:x})" },
{ "trigger": "BigInt", "contents": "BigInt(${1:x})" },
{ "trigger": "BigFloat", "contents": "BigFloat(${1:x})" },
{ "trigger": "get_rounding", "contents": "get_rounding(${1:T})" },
{ "trigger": "set_rounding", "contents": "set_rounding(${1:T},${2: mode})" },
{ "trigger": "with_rounding", "contents": "with_rounding(${1:f::Function},${2: T},${3: mode})" },
{ "trigger": "count_ones", "contents": "count_ones(${1:x::Integer) -> Intege})" },
{ "trigger": "count_zeros", "contents": "count_zeros(${1:x::Integer) -> Intege})" },
{ "trigger": "leading_zeros", "contents": "leading_zeros(${1:x::Integer) -> Intege})" },
{ "trigger": "leading_ones", "contents": "leading_ones(${1:x::Integer) -> Intege})" },
{ "trigger": "trailing_zeros", "contents": "trailing_zeros(${1:x::Integer) -> Intege})" },
{ "trigger": "trailing_ones", "contents": "trailing_ones(${1:x::Integer) -> Intege})" },
{ "trigger": "isprime", "contents": "isprime(${1:x::Integer) -> Boo})" },
{ "trigger": "primes", "contents": "primes(${1:n})" },
{ "trigger": "isodd", "contents": "isodd(${1:x::Integer) -> Boo})" },
{ "trigger": "iseven", "contents": "iseven(${1:x::Integer) -> Boo})" },
{ "trigger": "precision", "contents": "precision(${1:num::FloatingPoint})" },
{ "trigger": "get_bigfloat_precision", "contents": "get_bigfloat_precision()" },
{ "trigger": "set_bigfloat_precision", "contents": "set_bigfloat_precision(${1:x::Int64})" },
{ "trigger": "with_bigfloat_precision", "contents": "with_bigfloat_precision(${1:f::Function},${2: precision::Integer})" },
{ "trigger": "srand", "contents": "srand(${1:[rng]},${2: seed})" },
{ "trigger": "MersenneTwister", "contents": "MersenneTwister(${1:[seed]})" },
{ "trigger": "rand", "contents": "rand()" },
{ "trigger": "rand!", "contents": "rand!(${1:[rng]},${2: A})" },
{ "trigger": "rand", "contents": "rand(${1:rng::AbstractRNG[},${2: dims...]})" },
{ "trigger": "rand", "contents": "rand(${1:dims or [dims...]})" },
{ "trigger": "rand", "contents": "rand(${1:Int32|Uint32|Int64|Uint64|Int128|Uint128[},${2: dims...]})" },
{ "trigger": "rand", "contents": "rand(${1:r[},${2: dims...]})" },
{ "trigger": "randbool", "contents": "randbool(${1:[dims...]})" },
{ "trigger": "randbool!", "contents": "randbool!(${1:A})" },
{ "trigger": "randn", "contents": "randn(${1:dims or [dims...]})" },
{ "trigger": "randn!", "contents": "randn!(${1:A::Array{Float64},${2: N}})" },
{ "trigger": "randsym", "contents": "randsym(${1:n})" },
{ "trigger": "ndims", "contents": "ndims(${1:A) -> Intege})" },
{ "trigger": "size", "contents": "size(${1:A})" },
{ "trigger": "iseltype", "contents": "iseltype(${1:A},${2: T})" },
{ "trigger": "length", "contents": "length(${1:A) -> Intege})" },
{ "trigger": "countnz", "contents": "countnz(${1:A})" },
{ "trigger": "conj!", "contents": "conj!(${1:A})" },
{ "trigger": "stride", "contents": "stride(${1:A},${2: k})" },
{ "trigger": "strides", "contents": "strides(${1:A})" },
{ "trigger": "ind2sub", "contents": "ind2sub(${1:dims},${2: index) -> subscript})" },
{ "trigger": "sub2ind", "contents": "sub2ind(${1:dims},${2: i},${3: j},${4: k...) -> inde})" },
{ "trigger": "Array", "contents": "Array(${1:type},${2: dims})" },
{ "trigger": "getindex", "contents": "getindex(${1:type[},${2: elements...]})" },
{ "trigger": "cell", "contents": "cell(${1:dims})" },
{ "trigger": "zeros", "contents": "zeros(${1:type},${2: dims})" },
{ "trigger": "ones", "contents": "ones(${1:type},${2: dims})" },
{ "trigger": "infs", "contents": "infs(${1:type},${2: dims})" },
{ "trigger": "nans", "contents": "nans(${1:type},${2: dims})" },
{ "trigger": "trues", "contents": "trues(${1:dims})" },
{ "trigger": "falses", "contents": "falses(${1:dims})" },
{ "trigger": "fill", "contents": "fill(${1:v},${2: dims})" },
{ "trigger": "fill!", "contents": "fill!(${1:A},${2: x})" },
{ "trigger": "reshape", "contents": "reshape(${1:A},${2: dims})" },
{ "trigger": "similar", "contents": "similar(${1:array},${2: element_type},${3: dims})" },
{ "trigger": "reinterpret", "contents": "reinterpret(${1:type},${2: A})" },
{ "trigger": "eye", "contents": "eye(${1:n})" },
{ "trigger": "eye", "contents": "eye(${1:m},${2: n})" },
{ "trigger": "linspace", "contents": "linspace(${1:start},${2: stop},${3: n})" },
{ "trigger": "logspace", "contents": "logspace(${1:start},${2: stop},${3: n})" },
{ "trigger": "broadcast", "contents": "broadcast(${1:f},${2: As...})" },
{ "trigger": "broadcast!", "contents": "broadcast!(${1:f},${2: dest},${3: As...})" },
{ "trigger": "broadcast_function", "contents": "broadcast_function(${1:f})" },
{ "trigger": "broadcast!_function", "contents": "broadcast!_function(${1:f})" },
{ "trigger": "getindex", "contents": "getindex(${1:A},${2: inds...})" },
{ "trigger": "sub", "contents": "sub(${1:A},${2: inds...})" },
{ "trigger": "parent", "contents": "parent(${1:A})" },
{ "trigger": "parentindexes", "contents": "parentindexes(${1:A})" },
{ "trigger": "slicedim", "contents": "slicedim(${1:A},${2: d},${3: i})" },
{ "trigger": "slice", "contents": "slice(${1:A},${2: inds...})" },
{ "trigger": "setindex!", "contents": "setindex!(${1:A},${2: X},${3: inds...})" },
{ "trigger": "broadcast_getindex", "contents": "broadcast_getindex(${1:A},${2: inds...})" },
{ "trigger": "broadcast_setindex!", "contents": "broadcast_setindex!(${1:A},${2: X},${3: inds...})" },
{ "trigger": "cat", "contents": "cat(${1:dim},${2: A...})" },
{ "trigger": "vcat", "contents": "vcat(${1:A...})" },
{ "trigger": "hcat", "contents": "hcat(${1:A...})" },
{ "trigger": "hvcat", "contents": "hvcat(rows::(${1:Int...)},${2: values...})" },
{ "trigger": "flipdim", "contents": "flipdim(${1:A},${2: d})" },
{ "trigger": "flipud", "contents": "flipud(${1:A})" },
{ "trigger": "fliplr", "contents": "fliplr(${1:A})" },
{ "trigger": "circshift", "contents": "circshift(${1:A},${2: shifts})" },
{ "trigger": "find", "contents": "find(${1:A})" },
{ "trigger": "find", "contents": "find(${1:f},${2: A})" },
{ "trigger": "findn", "contents": "findn(${1:A})" },
{ "trigger": "findnz", "contents": "findnz(${1:A})" },
{ "trigger": "nonzeros", "contents": "nonzeros(${1:A})" },
{ "trigger": "findfirst", "contents": "findfirst(${1:A})" },
{ "trigger": "findfirst", "contents": "findfirst(${1:A},${2: v})" },
{ "trigger": "findfirst", "contents": "findfirst(${1:predicate},${2: A})" },
{ "trigger": "findnext", "contents": "findnext(${1:A},${2: i})" },
{ "trigger": "findnext", "contents": "findnext(${1:predicate},${2: A},${3: i})" },
{ "trigger": "findnext", "contents": "findnext(${1:A},${2: v},${3: i})" },
{ "trigger": "permutedims", "contents": "permutedims(${1:A},${2: perm})" },
{ "trigger": "ipermutedims", "contents": "ipermutedims(${1:A},${2: perm})" },
{ "trigger": "squeeze", "contents": "squeeze(${1:A},${2: dims})" },
{ "trigger": "vec", "contents": "vec(${1:Array) -> Vecto})" },
{ "trigger": "promote_shape", "contents": "promote_shape(${1:s1},${2: s2})" },
{ "trigger": "checkbounds", "contents": "checkbounds(${1:array},${2: indexes...})" },
{ "trigger": "cumprod", "contents": "cumprod(${1:A[},${2: dim]})" },
{ "trigger": "cumsum", "contents": "cumsum(${1:A[},${2: dim]})" },
{ "trigger": "cumsum_kbn", "contents": "cumsum_kbn(${1:A[},${2: dim]})" },
{ "trigger": "cummin", "contents": "cummin(${1:A[},${2: dim]})" },
{ "trigger": "cummax", "contents": "cummax(${1:A[},${2: dim]})" },
{ "trigger": "diff", "contents": "diff(${1:A[},${2: dim]})" },
{ "trigger": "gradient", "contents": "gradient(${1:F[},${2: h]})" },
{ "trigger": "rot180", "contents": "rot180(${1:A})" },
{ "trigger": "rotl90", "contents": "rotl90(${1:A})" },
{ "trigger": "rotr90", "contents": "rotr90(${1:A})" },
{ "trigger": "reducedim", "contents": "reducedim(${1:f},${2: A},${3: dims},${4: initial})" },
{ "trigger": "mapslices", "contents": "mapslices(${1:f},${2: A},${3: dims})" },
{ "trigger": "sum_kbn", "contents": "sum_kbn(${1:A})" },
{ "trigger": "cartesianmap", "contents": "cartesianmap(${1:f},${2: dims})" },
{ "trigger": "bitpack", "contents": "bitpack(${1:A::AbstractArray{T},${2: N}) -> BitArra})" },
{ "trigger": "bitunpack", "contents": "bitunpack(${1:B::BitArray{N}) -> Array{Bool},${2:N})" },
{ "trigger": "flipbits!", "contents": "flipbits!(${1:B::BitArray{N}) -> BitArray{N})" },
{ "trigger": "rol", "contents": "rol(${1:B::BitArray{1}},${2: i::Integer) -> BitArray{1})" },
{ "trigger": "ror", "contents": "ror(${1:B::BitArray{1}},${2: i::Integer) -> BitArray{1})" },
{ "trigger": "nthperm", "contents": "nthperm(${1:v},${2: k})" },
{ "trigger": "nthperm", "contents": "nthperm(${1:p})" },
{ "trigger": "nthperm!", "contents": "nthperm!(${1:v},${2: k})" },
{ "trigger": "randperm", "contents": "randperm(${1:n})" },
{ "trigger": "invperm", "contents": "invperm(${1:v})" },
{ "trigger": "isperm", "contents": "isperm(${1:v) -> Boo})" },
{ "trigger": "permute!", "contents": "permute!(${1:v},${2: p})" },
{ "trigger": "ipermute!", "contents": "ipermute!(${1:v},${2: p})" },
{ "trigger": "randcycle", "contents": "randcycle(${1:n})" },
{ "trigger": "shuffle", "contents": "shuffle(${1:v})" },
{ "trigger": "shuffle!", "contents": "shuffle!(${1:v})" },
{ "trigger": "reverse", "contents": "reverse(v[, start=1[, stop=length(${1:v)]]})" },
{ "trigger": "reverse!", "contents": "reverse!(v[, start=1[, stop=length(${1:v)]]) -> })" },
{ "trigger": "combinations", "contents": "combinations(${1:itr},${2: n})" },
{ "trigger": "permutations", "contents": "permutations(${1:itr})" },
{ "trigger": "partitions", "contents": "partitions(${1:n})" },
{ "trigger": "partitions", "contents": "partitions(${1:n},${2: m})" },
{ "trigger": "partitions", "contents": "partitions(${1:array})" },
{ "trigger": "partitions", "contents": "partitions(${1:array},${2: m})" },
{ "trigger": "mean", "contents": "mean(${1:v[},${2: region]})" },
{ "trigger": "std", "contents": "std(${1:v[},${2: region]})" },
{ "trigger": "stdm", "contents": "stdm(${1:v},${2: m})" },
{ "trigger": "var", "contents": "var(${1:v[},${2: region]})" },
{ "trigger": "varm", "contents": "varm(${1:v},${2: m})" },
{ "trigger": "median", "contents": "median(${1:v; checknan::Bool=true})" },
{ "trigger": "median!", "contents": "median!(${1:v; checknan::Bool=true})" },
{ "trigger": "hist", "contents": "hist(${1:v[},${2: n]) -> e},${3: count})" },
{ "trigger": "hist", "contents": "hist(${1:v},${2: e) -> e},${3: count})" },
{ "trigger": "hist2d", "contents": "hist2d(M, e1, e2) -> (${1:edge1},${2: edge2},${3: counts})" },
{ "trigger": "histrange", "contents": "histrange(${1:v},${2: n})" },
{ "trigger": "midpoints", "contents": "midpoints(${1:e})" },
{ "trigger": "quantile", "contents": "quantile(${1:v},${2: p})" },
{ "trigger": "quantile", "contents": "quantile(${1:v},${2: p})" },
{ "trigger": "quantile!", "contents": "quantile!(${1:v},${2: p})" },
{ "trigger": "cov", "contents": "cov(${1:v1[},${2: v2]})" },
{ "trigger": "cor", "contents": "cor(${1:v1[},${2: v2]})" },
{ "trigger": "fft", "contents": "fft(${1:A[},${2: dims]})" },
{ "trigger": "fft!", "contents": "fft!(${1:A[},${2: dims]})" },
{ "trigger": "ifft", "contents": "ifft(${1:A[},${2: dims]})" },
{ "trigger": "ifft!", "contents": "ifft!(${1:A[},${2: dims]})" },
{ "trigger": "bfft", "contents": "bfft(${1:A[},${2: dims]})" },
{ "trigger": "bfft!", "contents": "bfft!(${1:A[},${2: dims]})" },
{ "trigger": "plan_fft", "contents": "plan_fft(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_ifft", "contents": "plan_ifft(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_bfft", "contents": "plan_bfft(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_fft!", "contents": "plan_fft!(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_ifft!", "contents": "plan_ifft!(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_bfft!", "contents": "plan_bfft!(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "rfft", "contents": "rfft(${1:A[},${2: dims]})" },
{ "trigger": "irfft", "contents": "irfft(${1:A},${2: d[},${3: dims]})" },
{ "trigger": "brfft", "contents": "brfft(${1:A},${2: d[},${3: dims]})" },
{ "trigger": "plan_rfft", "contents": "plan_rfft(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_brfft", "contents": "plan_brfft(${1:A},${2: d[},${3: dims[},${4: flags[},${5: timelimit]]]})" },
{ "trigger": "plan_irfft", "contents": "plan_irfft(${1:A},${2: d[},${3: dims[},${4: flags[},${5: timelimit]]]})" },
{ "trigger": "dct", "contents": "dct(${1:A[},${2: dims]})" },
{ "trigger": "dct!", "contents": "dct!(${1:A[},${2: dims]})" },
{ "trigger": "idct", "contents": "idct(${1:A[},${2: dims]})" },
{ "trigger": "idct!", "contents": "idct!(${1:A[},${2: dims]})" },
{ "trigger": "plan_dct", "contents": "plan_dct(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_dct!", "contents": "plan_dct!(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_idct", "contents": "plan_idct(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "plan_idct!", "contents": "plan_idct!(${1:A[},${2: dims[},${3: flags[},${4: timelimit]]]})" },
{ "trigger": "fftshift", "contents": "fftshift(${1:x})" },
{ "trigger": "fftshift", "contents": "fftshift(${1:x},${2: dim})" },
{ "trigger": "ifftshift", "contents": "ifftshift(${1:x[},${2: dim]})" },
{ "trigger": "filt", "contents": "filt(${1:b},${2: a},${3: x})" },
{ "trigger": "deconv", "contents": "deconv(${1:b},${2: a})" },
{ "trigger": "conv", "contents": "conv(${1:u},${2: v})" },
{ "trigger": "conv2", "contents": "conv2(${1:u},${2: v},${3: A})" },
{ "trigger": "conv2", "contents": "conv2(${1:B},${2: A})" },
{ "trigger": "xcorr", "contents": "xcorr(${1:u},${2: v})" },
{ "trigger": "r2r", "contents": "r2r(${1:A},${2: kind[},${3: dims]})" },
{ "trigger": "r2r!", "contents": "r2r!(${1:A},${2: kind[},${3: dims]})" },
{ "trigger": "plan_r2r", "contents": "plan_r2r(${1:A},${2: kind[},${3: dims[},${4: flags[},${5: timelimit]]]})" },
{ "trigger": "plan_r2r!", "contents": "plan_r2r!(${1:A},${2: kind[},${3: dims[},${4: flags[},${5: timelimit]]]})" },
{ "trigger": "quadgk", "contents": "quadgk(f, a, b, c...; reltol=sqrt(${1:eps)},${2: abstol=0},${3: maxevals=10^7},${4: order=7},${5: norm=norm})" },
{ "trigger": "addprocs", "contents": "addprocs(n; cman::ClusterManager=LocalManager(${1:)) -> List of process identifier})" },
{ "trigger": "addprocs", "contents": "addprocs(${1:machines; tunnel=false},${2: dir=JULIA_HOME},${3: sshflags::Cmd=``) -> List of process identifier})" },
{ "trigger": "nprocs", "contents": "nprocs()" },
{ "trigger": "nworkers", "contents": "nworkers()" },
{ "trigger": "procs", "contents": "procs()" },
{ "trigger": "workers", "contents": "workers()" },
{ "trigger": "rmprocs", "contents": "rmprocs(${1:pids...})" },
{ "trigger": "interrupt", "contents": "interrupt(${1:[pids...]})" },
{ "trigger": "myid", "contents": "myid()" },
{ "trigger": "pmap", "contents": "pmap(${1:f},${2: lsts...; err_retry=true},${3: err_stop=false})" },
{ "trigger": "remotecall", "contents": "remotecall(${1:id},${2: func},${3: args...})" },
{ "trigger": "wait", "contents": "wait(${1:x})" },
{ "trigger": "fetch", "contents": "fetch(${1:RemoteRef})" },
{ "trigger": "remotecall_wait", "contents": "remotecall_wait(${1:id},${2: func},${3: args...})" },
{ "trigger": "remotecall_fetch", "contents": "remotecall_fetch(${1:id},${2: func},${3: args...})" },
{ "trigger": "put", "contents": "put(${1:RemoteRef},${2: value})" },
{ "trigger": "take", "contents": "take(${1:RemoteRef})" },
{ "trigger": "isready", "contents": "isready(${1:RemoteRef})" },
{ "trigger": "RemoteRef", "contents": "RemoteRef()" },
{ "trigger": "RemoteRef", "contents": "RemoteRef(${1:n})" },
{ "trigger": "timedwait", "contents": "timedwait(${1:testcb::Function},${2: secs::Float64; pollint::Float64=0.1})" },
{ "trigger": "DArray", "contents": "DArray(${1:init},${2: dims[},${3: procs},${4: dist]})" },
{ "trigger": "dzeros", "contents": "dzeros(${1:dims},${2: ...})" },
{ "trigger": "dones", "contents": "dones(${1:dims},${2: ...})" },
{ "trigger": "dfill", "contents": "dfill(${1:x},${2: dims},${3: ...})" },
{ "trigger": "drand", "contents": "drand(${1:dims},${2: ...})" },
{ "trigger": "drandn", "contents": "drandn(${1:dims},${2: ...})" },
{ "trigger": "distribute", "contents": "distribute(${1:a})" },
{ "trigger": "localpart", "contents": "localpart(${1:d})" },
{ "trigger": "localindexes", "contents": "localindexes(${1:d})" },
{ "trigger": "procs", "contents": "procs(${1:d})" },
{ "trigger": "SharedArray", "contents": "SharedArray(T::Type, dims::NTuple; init=false, pids=workers(${1:)})" },
{ "trigger": "procs", "contents": "procs(${1:S::SharedArray})" },
{ "trigger": "sdata", "contents": "sdata(${1:S::SharedArray})" },
{ "trigger": "indexpids", "contents": "indexpids(${1:S::SharedArray})" },
{ "trigger": "run", "contents": "run(${1:command})" },
{ "trigger": "spawn", "contents": "spawn(${1:command})" },
{ "trigger": "DevNull", "contents": "DevNull" },
{ "trigger": "success", "contents": "success(${1:command})" },
{ "trigger": "process_running", "contents": "process_running(${1:p::Process})" },
{ "trigger": "process_exited", "contents": "process_exited(${1:p::Process})" },
{ "trigger": "kill", "contents": "kill(${1:p::Process},${2: signum=SIGTERM})" },
{ "trigger": "readsfrom", "contents": "readsfrom(${1:command})" },
{ "trigger": "writesto", "contents": "writesto(${1:command})" },
{ "trigger": "readandwrite", "contents": "readandwrite(${1:command})" },
{ "trigger": "ignorestatus", "contents": "ignorestatus(${1:command})" },
{ "trigger": "detach", "contents": "detach(${1:command})" },
{ "trigger": "setenv", "contents": "setenv(${1:command},${2: env})" },
{ "trigger": "gethostname", "contents": "gethostname(${1:) -> Strin})" },
{ "trigger": "getipaddr", "contents": "getipaddr(${1:) -> Strin})" },
{ "trigger": "pwd", "contents": "pwd(${1:) -> Strin})" },
{ "trigger": "cd", "contents": "cd(${1:dir::String})" },
{ "trigger": "cd", "contents": "cd(${1:f[},${2: dir]})" },
{ "trigger": "mkdir", "contents": "mkdir(${1:path[},${2: mode]})" },
{ "trigger": "mkpath", "contents": "mkpath(${1:path[},${2: mode]})" },
{ "trigger": "rmdir", "contents": "rmdir(${1:path})" },
{ "trigger": "getpid", "contents": "getpid(${1:) -> Int3})" },
{ "trigger": "time", "contents": "time(${1:[t::TmStruct]})" },
{ "trigger": "time_ns", "contents": "time_ns()" },
{ "trigger": "strftime", "contents": "strftime(${1:[format]},${2: time})" },
{ "trigger": "strptime", "contents": "strptime(${1:[format]},${2: timestr})" },
{ "trigger": "TmStruct", "contents": "TmStruct(${1:[seconds]})" },
{ "trigger": "tic", "contents": "tic()" },
{ "trigger": "toc", "contents": "toc()" },
{ "trigger": "toq", "contents": "toq()" },
{ "trigger": "EnvHash", "contents": "EnvHash(${1:) ->})" },
{ "trigger": "ENV", "contents": "ENV" },
{ "trigger": "ccall", "contents": "ccall((symbol, library) or fptr, RetType, (${1:ArgType1},${2: ...)},${3: ArgVar1},${4: ...})" },
{ "trigger": "cglobal", "contents": "cglobal((${1:symbol},${2: library) or ptr[},${3: Type=Void]})" },
{ "trigger": "cfunction", "contents": "cfunction(fun::Function, RetType::Type, (${1:ArgTypes...)})" },
{ "trigger": "dlopen", "contents": "dlopen(${1:libfile::String[},${2: flags::Integer]})" },
{ "trigger": "dlopen_e", "contents": "dlopen_e(${1:libfile::String[},${2: flags::Integer]})" },
{ "trigger": "RTLD_DEEPBIND", "contents": "RTLD_DEEPBIND" },
{ "trigger": "RTLD_FIRST", "contents": "RTLD_FIRST" },
{ "trigger": "RTLD_GLOBAL", "contents": "RTLD_GLOBAL" },
{ "trigger": "RTLD_LAZY", "contents": "RTLD_LAZY" },
{ "trigger": "RTLD_LOCAL", "contents": "RTLD_LOCAL" },
{ "trigger": "RTLD_NODELETE", "contents": "RTLD_NODELETE" },
{ "trigger": "RTLD_NOLOAD", "contents": "RTLD_NOLOAD" },
{ "trigger": "RTLD_NOW", "contents": "RTLD_NOW" },
{ "trigger": "dlsym", "contents": "dlsym(${1:handle},${2: sym})" },
{ "trigger": "dlsym_e", "contents": "dlsym_e(${1:handle},${2: sym})" },
{ "trigger": "dlclose", "contents": "dlclose(${1:handle})" },
{ "trigger": "find_library", "contents": "find_library(${1:names},${2: locations})" },
{ "trigger": "DL_LOAD_PATH", "contents": "DL_LOAD_PATH" },
{ "trigger": "c_malloc", "contents": "c_malloc(${1:size::Integer) -> Ptr{Void})" },
{ "trigger": "c_calloc", "contents": "c_calloc(${1:num::Integer},${2: size::Integer) -> Ptr{Void})" },
{ "trigger": "c_realloc", "contents": "c_realloc(${1:addr::Ptr},${2: size::Integer) -> Ptr{Void})" },
{ "trigger": "c_free", "contents": "c_free(${1:addr::Ptr})" },
{ "trigger": "unsafe_load", "contents": "unsafe_load(${1:p::Ptr{T}},${2: i::Integer})" },
{ "trigger": "unsafe_store!", "contents": "unsafe_store!(${1:p::Ptr{T}},${2: x},${3: i::Integer})" },
{ "trigger": "unsafe_copy!", "contents": "unsafe_copy!(${1:dest::Ptr{T}},${2: src::Ptr{T}},${3: N})" },
{ "trigger": "unsafe_copy!", "contents": "unsafe_copy!(${1:dest::Array},${2: do},${3: src::Array},${4: so},${5: N})" },
{ "trigger": "copy!", "contents": "copy!(${1:dest},${2: src})" },
{ "trigger": "copy!", "contents": "copy!(${1:dest},${2: do},${3: src},${4: so},${5: N})" },
{ "trigger": "pointer", "contents": "pointer(${1:a[},${2: index]})" },
{ "trigger": "pointer", "contents": "pointer(${1:type},${2: int})" },
{ "trigger": "pointer_to_array", "contents": "pointer_to_array(${1:p},${2: dims[},${3: own]})" },
{ "trigger": "pointer_from_objref", "contents": "pointer_from_objref(${1:obj})" },
{ "trigger": "unsafe_pointer_to_objref", "contents": "unsafe_pointer_to_objref(${1:p::Ptr})" },
{ "trigger": "disable_sigint", "contents": "disable_sigint(${1:f::Function})" },
{ "trigger": "reenable_sigint", "contents": "reenable_sigint(${1:f::Function})" },
{ "trigger": "errno", "contents": "errno(${1:[code]})" },
{ "trigger": "systemerror", "contents": "systemerror(${1:sysfunc},${2: iftrue})" },
{ "trigger": "strerror", "contents": "strerror(${1:n})" },
{ "trigger": "Cchar", "contents": "Cchar" },
{ "trigger": "Cuchar", "contents": "Cuchar" },
{ "trigger": "Cshort", "contents": "Cshort" },
{ "trigger": "Cushort", "contents": "Cushort" },
{ "trigger": "Cint", "contents": "Cint" },
{ "trigger": "Cuint", "contents": "Cuint" },
{ "trigger": "Clong", "contents": "Clong" },
{ "trigger": "Culong", "contents": "Culong" },
{ "trigger": "Clonglong", "contents": "Clonglong" },
{ "trigger": "Culonglong", "contents": "Culonglong" },
{ "trigger": "Csize_t", "contents": "Csize_t" },
{ "trigger": "Cssize_t", "contents": "Cssize_t" },
{ "trigger": "Cptrdiff_t", "contents": "Cptrdiff_t" },
{ "trigger": "Coff_t", "contents": "Coff_t" },
{ "trigger": "Cwchar_t", "contents": "Cwchar_t" },
{ "trigger": "Cfloat", "contents": "Cfloat" },
{ "trigger": "Cdouble", "contents": "Cdouble" },
{ "trigger": "error", "contents": "error(${1:message::String})" },
{ "trigger": "throw", "contents": "throw(${1:e})" },
{ "trigger": "rethrow", "contents": "rethrow(${1:[e]})" },
{ "trigger": "backtrace", "contents": "backtrace()" },
{ "trigger": "catch_backtrace", "contents": "catch_backtrace()" },
{ "trigger": "assert", "contents": "assert(${1:cond[},${2: text]})" },
{ "trigger": "ArgumentError", "contents": "ArgumentError" },
{ "trigger": "BoundsError", "contents": "BoundsError" },
{ "trigger": "EOFError", "contents": "EOFError" },
{ "trigger": "ErrorException", "contents": "ErrorException" },
{ "trigger": "KeyError", "contents": "KeyError" },
{ "trigger": "LoadError", "contents": "LoadError" },
{ "trigger": "MethodError", "contents": "MethodError" },
{ "trigger": "ParseError", "contents": "ParseError" },
{ "trigger": "ProcessExitedException", "contents": "ProcessExitedException" },
{ "trigger": "SystemError", "contents": "SystemError" },
{ "trigger": "TypeError", "contents": "TypeError" },
{ "trigger": "Task", "contents": "Task(${1:func})" },
{ "trigger": "yieldto", "contents": "yieldto(${1:task},${2: args...})" },
{ "trigger": "current_task", "contents": "current_task()" },
{ "trigger": "istaskdone", "contents": "istaskdone(${1:task})" },
{ "trigger": "consume", "contents": "consume(${1:task},${2: values...})" },
{ "trigger": "produce", "contents": "produce(${1:value})" },
{ "trigger": "yield", "contents": "yield()" },
{ "trigger": "task_local_storage", "contents": "task_local_storage(${1:symbol})" },
{ "trigger": "task_local_storage", "contents": "task_local_storage(${1:symbol},${2: value})" },
{ "trigger": "task_local_storage", "contents": "task_local_storage(${1:body},${2: symbol},${3: value})" },
{ "trigger": "Condition", "contents": "Condition()" },
{ "trigger": "notify", "contents": "notify(${1:condition},${2: val=nothing; all=true},${3: error=false})" },
{ "trigger": "schedule", "contents": "schedule(${1:t::Task})" },
{ "trigger": "sleep", "contents": "sleep(${1:seconds})" },
{ "trigger": "Timer", "contents": "Timer(${1:f::Function})" },
{ "trigger": "start_timer", "contents": "start_timer(${1:t::Timer},${2: delay},${3: repeat})" },
{ "trigger": "stop_timer", "contents": "stop_timer(${1:t::Timer})" },
{ "trigger": "module_name", "contents": "module_name(${1:m::Module) -> Symbo})" },
{ "trigger": "module_parent", "contents": "module_parent(${1:m::Module) -> Modul})" },
{ "trigger": "current_module", "contents": "current_module(${1:) -> Modul})" },
{ "trigger": "fullname", "contents": "fullname(${1:m::Module})" },
{ "trigger": "names", "contents": "names(${1:x})" },
{ "trigger": "isconst", "contents": "isconst(${1:[m::Module]},${2: s::Symbol) -> Boo})" },
{ "trigger": "isgeneric", "contents": "isgeneric(${1:f::Function) -> Boo})" },
{ "trigger": "function_name", "contents": "function_name(${1:f::Function) -> Symbo})" },
{ "trigger": "function_module", "contents": "function_module(${1:f::Function},${2: types) -> Modul})" },
{ "trigger": "functionloc", "contents": "functionloc(${1:f::Function},${2: types})" },
{ "trigger": "functionlocs", "contents": "functionlocs(${1:f::Function},${2: types})" },
{ "trigger": "gc", "contents": "gc()" },
{ "trigger": "gc_disable", "contents": "gc_disable()" },
{ "trigger": "gc_enable", "contents": "gc_enable()" },
{ "trigger": "macroexpand", "contents": "macroexpand(${1:x})" },
{ "trigger": "expand", "contents": "expand(${1:x})" },
{ "trigger": "code_lowered", "contents": "code_lowered(${1:f},${2: types})" },
{ "trigger": "code_typed", "contents": "code_typed(${1:f},${2: types})" },
{ "trigger": "code_llvm", "contents": "code_llvm(${1:f},${2: types})" },
{ "trigger": "code_native", "contents": "code_native(${1:f},${2: types})" },
{ "trigger": "precompile", "contents": "precompile(f, args::(${1:Any...},${2: )})" },
{ "trigger": "PriorityQueue{K,V}", "contents": "PriorityQueue{K,V}(${1:[ord]})" },
{ "trigger": "enqueue!", "contents": "enqueue!(${1:pq},${2: k},${3: v})" },
{ "trigger": "dequeue!", "contents": "dequeue!(${1:pq})" },
{ "trigger": "peek", "contents": "peek(${1:pq})" },
{ "trigger": "heapify", "contents": "heapify(${1:v[},${2: ord]})" },
{ "trigger": "heapify!", "contents": "heapify!(${1:v[},${2: ord]})" },
{ "trigger": "isheap", "contents": "isheap(${1:v[},${2: ord]})" },
{ "trigger": "heappush!", "contents": "heappush!(${1:v[},${2: ord]})" },
{ "trigger": "heappop!", "contents": "heappop!(${1:v[},${2: ord]})" },
{ "trigger": "OS_NAME", "contents": "OS_NAME" },
{ "trigger": "ARGS", "contents": "ARGS" },
{ "trigger": "C_NULL", "contents": "C_NULL" },
{ "trigger": "CPU_CORES", "contents": "CPU_CORES" },
{ "trigger": "WORD_SIZE", "contents": "WORD_SIZE" },
{ "trigger": "VERSION", "contents": "VERSION" },
{ "trigger": "LOAD_PATH", "contents": "LOAD_PATH" },
{ "trigger": "isblockdev", "contents": "isblockdev(${1:path) -> Boo})" },
{ "trigger": "ischardev", "contents": "ischardev(${1:path) -> Boo})" },
{ "trigger": "isdir", "contents": "isdir(${1:path) -> Boo})" },
{ "trigger": "isexecutable", "contents": "isexecutable(${1:path) -> Boo})" },
{ "trigger": "isfifo", "contents": "isfifo(${1:path) -> Boo})" },
{ "trigger": "isfile", "contents": "isfile(${1:path) -> Boo})" },
{ "trigger": "islink", "contents": "islink(${1:path) -> Boo})" },
{ "trigger": "ispath", "contents": "ispath(${1:path) -> Boo})" },
{ "trigger": "isreadable", "contents": "isreadable(${1:path) -> Boo})" },
{ "trigger": "issetgid", "contents": "issetgid(${1:path) -> Boo})" },
{ "trigger": "issetuid", "contents": "issetuid(${1:path) -> Boo})" },
{ "trigger": "issocket", "contents": "issocket(${1:path) -> Boo})" },
{ "trigger": "issticky", "contents": "issticky(${1:path) -> Boo})" },
{ "trigger": "iswritable", "contents": "iswritable(${1:path) -> Boo})" },
{ "trigger": "homedir", "contents": "homedir(${1:) -> Strin})" },
{ "trigger": "dirname", "contents": "dirname(${1:path::String) -> Strin})" },
{ "trigger": "basename", "contents": "basename(${1:path::String) -> Strin})" },
{ "trigger": "isabspath", "contents": "isabspath(${1:path::String) -> Boo})" },
{ "trigger": "isdirpath", "contents": "isdirpath(${1:path::String) -> Boo})" },
{ "trigger": "joinpath", "contents": "joinpath(${1:parts...) -> Strin})" },
{ "trigger": "abspath", "contents": "abspath(${1:path::String) -> Strin})" },
{ "trigger": "normpath", "contents": "normpath(${1:path::String) -> Strin})" },
{ "trigger": "realpath", "contents": "realpath(${1:path::String) -> Strin})" },
{ "trigger": "expanduser", "contents": "expanduser(${1:path::String) -> Strin})" },
{ "trigger": "splitdir", "contents": "splitdir(path::String) -> (${1:String},${2: String})" },
{ "trigger": "splitdrive", "contents": "splitdrive(path::String) -> (${1:String},${2: String})" },
{ "trigger": "splitext", "contents": "splitext(path::String) -> (${1:String},${2: String})" },
{ "trigger": "tempname", "contents": "tempname()" },
{ "trigger": "tempdir", "contents": "tempdir()" },
{ "trigger": "mktemp", "contents": "mktemp()" },
{ "trigger": "mktempdir", "contents": "mktempdir()" },
{ "trigger": "Vec2", "contents": "Vec2(${1:x},${2: y})" },
{ "trigger": "BoundingBox", "contents": "BoundingBox(${1:xmin},${2: xmax},${3: ymin},${4: ymax})" },
{ "trigger": "BoundingBox", "contents": "BoundingBox(${1:objs...})" },
{ "trigger": "width", "contents": "width(${1:obj})" },
{ "trigger": "height", "contents": "height(${1:obj})" },
{ "trigger": "xmin", "contents": "xmin(${1:obj})" },
{ "trigger": "xmax", "contents": "xmax(${1:obj})" },
{ "trigger": "ymin", "contents": "ymin(${1:obj})" },
{ "trigger": "ymax", "contents": "ymax(${1:obj})" },
{ "trigger": "diagonal", "contents": "diagonal(${1:obj})" },
{ "trigger": "aspect_ratio", "contents": "aspect_ratio(${1:obj})" },
{ "trigger": "center", "contents": "center(${1:obj})" },
{ "trigger": "xrange", "contents": "xrange(${1:obj})" },
{ "trigger": "yrange", "contents": "yrange(${1:obj})" },
{ "trigger": "rotate", "contents": "rotate(${1:obj},${2: angle},${3: origin) -> newob})" },
{ "trigger": "shift", "contents": "shift(${1:obj},${2: dx},${3: dy})" },
{ "trigger": "deform", "contents": "deform(${1:bb::BoundingBox},${2: dxmin},${3: dxmax},${4: dymin},${5: dymax})" },
{ "trigger": "isinside", "contents": "isinside(${1:bb::BoundingBox},${2: x},${3: y})" },
{ "trigger": "isinside", "contents": "isinside(${1:bb::BoundingBox},${2: point})" },
{ "trigger": "dot", "contents": "dot(${1:x},${2: y})" },
{ "trigger": "cross", "contents": "cross(${1:x},${2: y})" },
{ "trigger": "rref", "contents": "rref(${1:A})" },
{ "trigger": "factorize", "contents": "factorize(${1:A})" },
{ "trigger": "factorize!", "contents": "factorize!(${1:A})" },
{ "trigger": "lu", "contents": "lu(${1:A) -> L},${2: U},${3: })" },
{ "trigger": "lufact", "contents": "lufact(${1:A) -> L})" },
{ "trigger": "lufact!", "contents": "lufact!(${1:A) -> L})" },
{ "trigger": "chol", "contents": "chol(${1:A[},${2: LU]) -> })" },
{ "trigger": "cholfact", "contents": "cholfact(${1:A},${2: [LU},${3:][pivot=false},${4:][tol=-1.0]) -> Cholesk})" },
{ "trigger": "cholfact", "contents": "cholfact(${1:A[},${2: ll]) -> CholmodFacto})" },
{ "trigger": "cholfact!", "contents": "cholfact!(${1:A},${2: [LU},${3:][pivot=false},${4:][tol=-1.0]) -> Cholesk})" },
{ "trigger": "qr", "contents": "qr(${1:A},${2: [pivot=false},${3:][thin=true]) -> Q},${4: R},${5: [p})" },
{ "trigger": "qrfact", "contents": "qrfact(${1:A[},${2: pivot=false]})" },
{ "trigger": "qrfact!", "contents": "qrfact!(${1:A[},${2: pivot=false]})" },
{ "trigger": "bkfact", "contents": "bkfact(${1:A) -> BunchKaufma})" },
{ "trigger": "bkfact!", "contents": "bkfact!(${1:A) -> BunchKaufma})" },
{ "trigger": "sqrtm", "contents": "sqrtm(${1:A})" },
{ "trigger": "eig", "contents": "eig(${1:A[},${2: balance=:balance]) -> D},${3: })" },
{ "trigger": "eig", "contents": "eig(${1:A},${2: B) -> D},${3: })" },
{ "trigger": "eigvals", "contents": "eigvals(${1:A})" },
{ "trigger": "eigmax", "contents": "eigmax(${1:A})" },
{ "trigger": "eigmin", "contents": "eigmin(${1:A})" },
{ "trigger": "eigvecs", "contents": "eigvecs(${1:A},${2: [eigvals},${3:][balance=:balance]})" },
{ "trigger": "eigfact", "contents": "eigfact(${1:A[},${2: balance=:balance]})" },
{ "trigger": "eigfact", "contents": "eigfact(${1:A},${2: B})" },
{ "trigger": "eigfact!", "contents": "eigfact!(${1:A[},${2: B]})" },
{ "trigger": "hessfact", "contents": "hessfact(${1:A})" },
{ "trigger": "hessfact!", "contents": "hessfact!(${1:A})" },
{ "trigger": "schurfact", "contents": "schurfact(${1:A) -> Schu})" },
{ "trigger": "schurfact!", "contents": "schurfact!(${1:A})" },
{ "trigger": "schur", "contents": "schur(${1:A) -> Schur[:T]},${2: Schur[:Z]},${3: Schur[:values})" },
{ "trigger": "schurfact", "contents": "schurfact(${1:A},${2: B) -> GeneralizedSchu})" },
{ "trigger": "schur", "contents": "schur(${1:A},${2: B) -> GeneralizedSchur[:S]},${3: GeneralizedSchur[:T]},${4: GeneralizedSchur[:Q]},${5: GeneralizedSchur[:Z})" },
{ "trigger": "svdfact", "contents": "svdfact(${1:A[},${2: thin]) -> SV})" },
{ "trigger": "svdfact!", "contents": "svdfact!(${1:A[},${2: thin]) -> SV})" },
{ "trigger": "svd", "contents": "svd(${1:A[},${2: thin]) -> U},${3: S},${4: })" },
{ "trigger": "svdvals", "contents": "svdvals(${1:A})" },
{ "trigger": "svdvals!", "contents": "svdvals!(${1:A})" },
{ "trigger": "svdfact", "contents": "svdfact(${1:A},${2: B) -> GeneralizedSV})" },
{ "trigger": "svd", "contents": "svd(${1:A},${2: B) -> U},${3: V},${4: Q},${5: D1},${6: D2},${7: R})" },
{ "trigger": "svdvals", "contents": "svdvals(${1:A},${2: B})" },
{ "trigger": "triu", "contents": "triu(${1:M})" },
{ "trigger": "triu!", "contents": "triu!(${1:M})" },
{ "trigger": "tril", "contents": "tril(${1:M})" },
{ "trigger": "tril!", "contents": "tril!(${1:M})" },
{ "trigger": "diagind", "contents": "diagind(${1:M[},${2: k]})" },
{ "trigger": "diag", "contents": "diag(${1:M[},${2: k]})" },
{ "trigger": "diagm", "contents": "diagm(${1:v[},${2: k]})" },
{ "trigger": "scale", "contents": "scale(A, b), scale(${1:b},${2: A})" },
{ "trigger": "scale!", "contents": "scale!(A, b), scale!(${1:b},${2: A})" },
{ "trigger": "Tridiagonal", "contents": "Tridiagonal(${1:dl},${2: d},${3: du})" },
{ "trigger": "Bidiagonal", "contents": "Bidiagonal(${1:dv},${2: ev},${3: isupper})" },
{ "trigger": "SymTridiagonal", "contents": "SymTridiagonal(${1:d},${2: du})" },
{ "trigger": "Woodbury", "contents": "Woodbury(${1:A},${2: U},${3: C},${4: V})" },
{ "trigger": "rank", "contents": "rank(${1:M})" },
{ "trigger": "norm", "contents": "norm(${1:A[},${2: p]})" },
{ "trigger": "normfro", "contents": "normfro(${1:A})" },
{ "trigger": "cond", "contents": "cond(${1:M[},${2: p]})" },
{ "trigger": "trace", "contents": "trace(${1:M})" },
{ "trigger": "det", "contents": "det(${1:M})" },
{ "trigger": "logdet", "contents": "logdet(${1:M})" },
{ "trigger": "inv", "contents": "inv(${1:M})" },
{ "trigger": "pinv", "contents": "pinv(${1:M})" },
{ "trigger": "null", "contents": "null(${1:M})" },
{ "trigger": "repmat", "contents": "repmat(${1:A},${2: n},${3: m})" },
{ "trigger": "repeat", "contents": "repeat(${1:A},${2: inner = Int[]},${3: outer = Int[]})" },
{ "trigger": "kron", "contents": "kron(${1:A},${2: B})" },
{ "trigger": "linreg", "contents": "linreg(${1:x},${2: y})" },
{ "trigger": "linreg", "contents": "linreg(${1:x},${2: y},${3: w})" },
{ "trigger": "expm", "contents": "expm(${1:A})" },
{ "trigger": "issym", "contents": "issym(${1:A})" },
{ "trigger": "isposdef", "contents": "isposdef(${1:A})" },
{ "trigger": "isposdef!", "contents": "isposdef!(${1:A})" },
{ "trigger": "istril", "contents": "istril(${1:A})" },
{ "trigger": "istriu", "contents": "istriu(${1:A})" },
{ "trigger": "ishermitian", "contents": "ishermitian(${1:A})" },
{ "trigger": "transpose", "contents": "transpose(${1:A})" },
{ "trigger": "ctranspose", "contents": "ctranspose(${1:A})" },
{ "trigger": "eigs", "contents": "eigs(A; nev=6, which=\"LM\", tol=0.0, maxiter=1000, sigma=0, ritzvec=true, op_part=:real, v0=zeros((0, ))) -> (${1:d[},${2: v]},${3: nconv},${4: niter},${5: nmult},${6: resid})" },
{ "trigger": "svds", "contents": "svds(${1:A; nev=6},${2: which=\"LA\"},${3: tol=0.0},${4: maxiter=1000},${5: ritzvec=true})" },
{ "trigger": "peakflops", "contents": "peakflops(${1:n; parallel=false})" },
{ "trigger": "dot", "contents": "dot(${1:n},${2: X},${3: incx},${4: Y},${5: incy})" },
{ "trigger": "dotu", "contents": "dotu(${1:n},${2: X},${3: incx},${4: Y},${5: incy})" },
{ "trigger": "dotc", "contents": "dotc(${1:n},${2: X},${3: incx},${4: U},${5: incy})" },
{ "trigger": "blascopy!", "contents": "blascopy!(${1:n},${2: X},${3: incx},${4: Y},${5: incy})" },
{ "trigger": "nrm2", "contents": "nrm2(${1:n},${2: X},${3: incx})" },
{ "trigger": "asum", "contents": "asum(${1:n},${2: X},${3: incx})" },
{ "trigger": "axpy!", "contents": "axpy!(${1:n},${2: a},${3: X},${4: incx},${5: Y},${6: incy})" },
{ "trigger": "scal!", "contents": "scal!(${1:n},${2: a},${3: X},${4: incx})" },
{ "trigger": "scal", "contents": "scal(${1:n},${2: a},${3: X},${4: incx})" },
{ "trigger": "syrk!", "contents": "syrk!(${1:uplo},${2: trans},${3: alpha},${4: A},${5: beta},${6: C})" },
{ "trigger": "syrk", "contents": "syrk(${1:uplo},${2: trans},${3: alpha},${4: A})" },
{ "trigger": "herk!", "contents": "herk!(${1:uplo},${2: trans},${3: alpha},${4: A},${5: beta},${6: C})" },
{ "trigger": "herk", "contents": "herk(${1:uplo},${2: trans},${3: alpha},${4: A})" },
{ "trigger": "gbmv!", "contents": "gbmv!(${1:trans},${2: m},${3: kl},${4: ku},${5: alpha},${6: A},${7: x},${8: beta},${9: y})" },
{ "trigger": "gbmv", "contents": "gbmv(${1:trans},${2: m},${3: kl},${4: ku},${5: alpha},${6: A},${7: x},${8: beta},${9: y})" },
{ "trigger": "sbmv!", "contents": "sbmv!(${1:uplo},${2: k},${3: alpha},${4: A},${5: x},${6: beta},${7: y})" },
{ "trigger": "sbmv", "contents": "sbmv(${1:uplo},${2: k},${3: alpha},${4: A},${5: x})" },
{ "trigger": "sbmv", "contents": "sbmv(${1:uplo},${2: k},${3: A},${4: x})" },
{ "trigger": "gemm!", "contents": "gemm!(${1:tA},${2: tB},${3: alpha},${4: A},${5: B},${6: beta},${7: C})" },
{ "trigger": "gemm", "contents": "gemm(${1:tA},${2: tB},${3: alpha},${4: A},${5: B})" },
{ "trigger": "gemm", "contents": "gemm(${1:tA},${2: tB},${3: alpha},${4: A},${5: B})" },
{ "trigger": "gemv!", "contents": "gemv!(${1:tA},${2: alpha},${3: A},${4: x},${5: beta},${6: y})" },
{ "trigger": "gemv", "contents": "gemv(${1:tA},${2: alpha},${3: A},${4: x})" },
{ "trigger": "gemv", "contents": "gemv(${1:tA},${2: alpha},${3: A},${4: x})" },
{ "trigger": "symm!", "contents": "symm!(${1:side},${2: ul},${3: alpha},${4: A},${5: B},${6: beta},${7: C})" },
{ "trigger": "symm", "contents": "symm(${1:side},${2: ul},${3: alpha},${4: A},${5: B})" },
{ "trigger": "symm", "contents": "symm(${1:side},${2: ul},${3: A},${4: B})" },
{ "trigger": "symm", "contents": "symm(${1:tA},${2: tB},${3: alpha},${4: A},${5: B})" },
{ "trigger": "symv!", "contents": "symv!(${1:ul},${2: alpha},${3: A},${4: x},${5: beta},${6: y})" },
{ "trigger": "symv", "contents": "symv(${1:ul},${2: alpha},${3: A},${4: x})" },
{ "trigger": "symv", "contents": "symv(${1:ul},${2: A},${3: x})" },
{ "trigger": "trmm!", "contents": "trmm!(${1:side},${2: ul},${3: tA},${4: dA},${5: alpha},${6: A},${7: B})" },
{ "trigger": "trmm", "contents": "trmm(${1:side},${2: ul},${3: tA},${4: dA},${5: alpha},${6: A},${7: B})" },
{ "trigger": "trsm!", "contents": "trsm!(${1:side},${2: ul},${3: tA},${4: dA},${5: alpha},${6: A},${7: B})" },
{ "trigger": "trsm", "contents": "trsm(${1:side},${2: ul},${3: tA},${4: dA},${5: alpha},${6: A},${7: B})" },
{ "trigger": "trmv!", "contents": "trmv!(${1:side},${2: ul},${3: tA},${4: dA},${5: alpha},${6: A},${7: b})" },
{ "trigger": "trmv", "contents": "trmv(${1:side},${2: ul},${3: tA},${4: dA},${5: alpha},${6: A},${7: b})" },
{ "trigger": "trsv!", "contents": "trsv!(${1:side},${2: ul},${3: tA},${4: dA},${5: alpha},${6: A},${7: b})" },
{ "trigger": "trsv", "contents": "trsv(${1:side},${2: ul},${3: tA},${4: dA},${5: alpha},${6: A},${7: b})" },
{ "trigger": "blas_set_num_threads", "contents": "blas_set_num_threads(${1:n})" },
{ "trigger": "dir", "contents": "dir(${1:) -> Strin})" },
{ "trigger": "dir", "contents": "dir(${1:names...) -> Strin})" },
{ "trigger": "init", "contents": "init()" },
{ "trigger": "resolve", "contents": "resolve()" },
{ "trigger": "edit", "contents": "edit()" },
{ "trigger": "add", "contents": "add(${1:pkg},${2: vers...})" },
{ "trigger": "rm", "contents": "rm(${1:pkg})" },
{ "trigger": "clone", "contents": "clone(${1:url[},${2: pkg]})" },
{ "trigger": "clone", "contents": "clone(${1:pkg})" },
{ "trigger": "available", "contents": "available(${1:) -> Vector{ASCIIString})" },
{ "trigger": "available", "contents": "available(${1:pkg) -> Vector{VersionNumber})" },
{ "trigger": "installed", "contents": "installed(${1:) -> Dict{ASCIIString},${2:VersionNumber})" },
{ "trigger": "installed", "contents": "installed(${1:pkg) -> Nothing | VersionNumbe})" },
{ "trigger": "status", "contents": "status()" },
{ "trigger": "update", "contents": "update()" },
{ "trigger": "checkout", "contents": "checkout(${1:pkg[},${2: branch=\"master\"]})" },
{ "trigger": "pin", "contents": "pin(${1:pkg})" },
{ "trigger": "pin", "contents": "pin(${1:pkg},${2: version})" },
{ "trigger": "free", "contents": "free(${1:pkg})" },
{ "trigger": "build", "contents": "build()" },
{ "trigger": "build", "contents": "build(${1:pkgs...})" },
{ "trigger": "generate", "contents": "generate(${1:pkg},${2: license})" },
{ "trigger": "register", "contents": "register(${1:pkg[},${2: url]})" },
{ "trigger": "tag", "contents": "tag(${1:pkg[},${2: ver[},${3: commit]]})" },
{ "trigger": "publish", "contents": "publish()" },
{ "trigger": "clear", "contents": "clear()" },
{ "trigger": "print", "contents": "print([io::IO = STDOUT], [data::Vector]; format = :tree, C = false, combine = true, cols = tty_cols(${1:)})" },
{ "trigger": "print", "contents": "print([io::IO = STDOUT], data::Vector, lidict::Dict; format = :tree, combine = true, cols = tty_cols(${1:)})" },
{ "trigger": "init", "contents": "init(${1:n::Integer},${2: delay::Float64})" },
{ "trigger": "fetch", "contents": "fetch(${1:) -> dat})" },
{ "trigger": "retrieve", "contents": "retrieve(${1:;C = false) -> data},${2: lidic})" },
{ "trigger": "sort!", "contents": "sort!(${1:v},${2: [dim},${3:] [alg=<algorithm>},${4:] [by=<transform>},${5:] [lt=<comparison>},${6:] [rev=false]})" },
{ "trigger": "sort", "contents": "sort(${1:v},${2: [alg=<algorithm>},${3:] [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "sort", "contents": "sort(${1:A},${2: dim},${3: [alg=<algorithm>},${4:] [by=<transform>},${5:] [lt=<comparison>},${6:] [rev=false]})" },
{ "trigger": "sortperm", "contents": "sortperm(${1:v},${2: [alg=<algorithm>},${3:] [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "sortrows", "contents": "sortrows(${1:A},${2: [alg=<algorithm>},${3:] [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "sortcols", "contents": "sortcols(${1:A},${2: [alg=<algorithm>},${3:] [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "issorted", "contents": "issorted(${1:v},${2: [by=<transform>},${3:] [lt=<comparison>},${4:] [rev=false]})" },
{ "trigger": "searchsorted", "contents": "searchsorted(${1:a},${2: x},${3: [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "searchsortedfirst", "contents": "searchsortedfirst(${1:a},${2: x},${3: [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "searchsortedlast", "contents": "searchsortedlast(${1:a},${2: x},${3: [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "select!", "contents": "select!(${1:v},${2: k},${3: [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "select", "contents": "select(${1:v},${2: k},${3: [by=<transform>},${4:] [lt=<comparison>},${5:] [rev=false]})" },
{ "trigger": "sparse", "contents": "sparse(${1:I},${2: J},${3: V[},${4: m},${5: n},${6: combine]})" },
{ "trigger": "sparsevec", "contents": "sparsevec(${1:I},${2: V[},${3: m},${4: combine]})" },
{ "trigger": "sparsevec", "contents": "sparsevec(${1:D::Dict[},${2: m]})" },
{ "trigger": "issparse", "contents": "issparse(${1:S})" },
{ "trigger": "sparse", "contents": "sparse(${1:A})" },
{ "trigger": "sparsevec", "contents": "sparsevec(${1:A})" },
{ "trigger": "full", "contents": "full(${1:S})" },
{ "trigger": "nfilled", "contents": "nfilled(${1:A})" },
{ "trigger": "spzeros", "contents": "spzeros(${1:m},${2: n})" },
{ "trigger": "spones", "contents": "spones(${1:S})" },
{ "trigger": "speye", "contents": "speye(${1:type},${2: m[},${3: n]})" },
{ "trigger": "spdiagm", "contents": "spdiagm(${1:B},${2: d[},${3: m},${4: n]})" },
{ "trigger": "sprand", "contents": "sprand(${1:m},${2: n},${3: density[},${4: rng]})" },
{ "trigger": "sprandn", "contents": "sprandn(${1:m},${2: n},${3: density})" },
{ "trigger": "sprandbool", "contents": "sprandbool(${1:m},${2: n},${3: density})" },
{ "trigger": "etree", "contents": "etree(${1:A[},${2: post]})" },
{ "trigger": "symperm", "contents": "symperm(${1:A},${2: p})" },
{ "trigger": "with_handler", "contents": "with_handler(${1:f},${2: handler})" }
]
}