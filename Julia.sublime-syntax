%YAML 1.2
---

# https://www.sublimetext.com/docs/3/syntax.html
# https://www.sublimetext.com/docs/3/scope_naming.html


# Julia is a language under development, this syntax strives to
# support the latest version of Julia.
# Julia is currently transitioning from version 0.6 to 0.7/1.0,
# the changes in 0.6 are listed here https://github.com/JuliaLang/julia/blob/master/NEWS.md

name: Julia
file_extensions: [jl]
first_line_match: ^#!.*\bjulia\s*$
scope: source.julia

variables:
  symb_op_ascii: '[-+*/\\=^:<>~?&$%|]'

  # The list of unicode symbols allowed as operators is fetched from the Julia parser https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm
  symb_op_unicode: '[≤≥¬←→↔↚↛↠↣↦↮⇎⇏⇒⇔⇴⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿⟵⟶⟷⟷⟹⟺⟻⟼⟽⟾⟿⤀⤁⤂⤃⤄⤅⤆⤇⤌⤍⤎⤏⤐⤑⤔⤕⤖⤗⤘⤝⤞⤟⤠⥄⥅⥆⥇⥈⥊⥋⥎⥐⥒⥓⥖⥗⥚⥛⥞⥟⥢⥤⥦⥧⥨⥩⥪⥫⥬⥭⥰⧴⬱⬰⬲⬳⬴⬵⬶⬷⬸⬹⬺⬻⬼⬽⬾⬿⭀⭁⭂⭃⭄⭇⭈⭉⭊⭋⭌￩￫≡≠≢∈∉∋∌⊆⊈⊂⊄⊊∝∊∍∥∦∷∺∻∽∾≁≃≄≅≆≇≈≉≊≋≌≍≎≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≣≦≧≨≩≪≫≬≭≮≯≰≱≲≳≴≵≶≷≸≹≺≻≼≽≾≿⊀⊁⊃⊅⊇⊉⊋⊏⊐⊑⊒⊜⊩⊬⊮⊰⊱⊲⊳⊴⊵⊶⊷⋍⋐⋑⋕⋖⋗⋘⋙⋚⋛⋜⋝⋞⋟⋠⋡⋢⋣⋤⋥⋦⋧⋨⋩⋪⋫⋬⋭⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿⟈⟉⟒⦷⧀⧁⧡⧣⧤⧥⩦⩧⩪⩫⩬⩭⩮⩯⩰⩱⩲⩳⩴⩵⩶⩷⩸⩹⩺⩻⩼⩽⩾⩿⪀⪁⪂⪃⪄⪅⪆⪇⪈⪉⪊⪋⪌⪍⪎⪏⪐⪑⪒⪓⪔⪕⪖⪗⪘⪙⪚⪛⪜⪝⪞⪟⪠⪡⪢⪣⪤⪥⪦⪧⪨⪩⪪⪫⪬⪭⪮⪯⪰⪱⪲⪳⪴⪵⪶⪷⪸⪹⪺⪻⪼⪽⪾⪿⫀⫁⫂⫃⫄⫅⫆⫇⫈⫉⫊⫋⫌⫍⫎⫏⫐⫑⫒⫓⫔⫕⫖⫗⫘⫙⫷⫸⫹⫺⊢⊣⊕⊖⊞⊟∪∨⊔±∓∔∸≂≏⊎⊻⊽⋎⋓⧺⧻⨈⨢⨣⨤⨥⨦⨧⨨⨩⨪⨫⨬⨭⨮⨹⨺⩁⩂⩅⩊⩌⩏⩐⩒⩔⩖⩗⩛⩝⩡⩢⩣÷⋅∘×∩∧⊗⊘⊙⊚⊛⊠⊡⊓∗∙∤⅋≀⊼⋄⋆⋇⋉⋊⋋⋌⋏⋒⟑⦸⦼⦾⦿⧶⧷⨇⨰⨱⨲⨳⨴⨵⨶⨷⨸⨻⨼⨽⩀⩃⩄⩋⩍⩎⩑⩓⩕⩘⩚⩜⩞⩟⩠⫛⊍▷⨝⟕⟖⟗↑↓⇵⟰⟱⤈⤉⤊⤋⤒⤓⥉⥌⥍⥏⥑⥔⥕⥘⥙⥜⥝⥠⥡⥣⥥⥮⥯￪￬]'
  symb_op: '(?:{{symb_op_ascii}}|{{symb_op_unicode}})'

  # Multi-character operators
  long_op: (?:\+=|-=|\*=|/=|//=|\\\\=|^=|÷=|%=|<<=|>>=|>>>=|\|=|&=|:=|=>|$=|\|\||&&|<:|>:|\|>|<\||//|\+\+|<=|>=|->|===|==|!==|!=)

  # julia> using Unicode
  # julia> join(sort(unique((filter(x -> isalpha(x[1]), string.(filter!(x -> isa(eval(x), DataType) || isa(eval(x), UnionAll), filter!(x -> !Base.isdeprecated(Base, x), [names(Base); names(Core)]))))))), "|")
  # Compare with https://github.com/JuliaLang/julia/blob/master/base/exports.jl
  base_types: \b(?:AbstractArray|AbstractChannel|AbstractDict|AbstractDisplay|AbstractFloat|AbstractIrrational|AbstractMatrix|AbstractRNG|AbstractRange|AbstractSerializer|AbstractSet|AbstractSparseArray|AbstractSparseMatrix|AbstractSparseVector|AbstractString|AbstractUnitRange|AbstractVecOrMat|AbstractVector|Adjoint|Any|ArgumentError|Array|AssertionError|Bidiagonal|BigFloat|BigInt|BitArray|BitMatrix|BitSet|BitVector|Bool|BoundsError|BufferStream|CapturedException|CartesianIndex|CartesianIndices|Cchar|Cdouble|Cfloat|Channel|Char|Cint|Cintmax_t|Clong|Clonglong|Cmd|CodeInfo|Colon|Complex|ComplexF16|ComplexF32|ComplexF64|CompositeException|Condition|ConjArray|ConjMatrix|ConjVector|Cptrdiff_t|Cshort|Csize_t|Cssize_t|Cstring|Cuchar|Cuint|Cuintmax_t|Culong|Culonglong|Cushort|Cvoid|Cwchar_t|Cwstring|DataType|DenseArray|DenseMatrix|DenseVecOrMat|DenseVector|Diagonal|Dict|DimensionMismatch|Dims|DivideError|DomainError|EOFError|EachLine|Enum|Enumerate|ErrorException|Exception|ExponentialBackOff|Expr|Factorization|Float16|Float32|Float64|Function|GlobalRef|GotoNode|HTML|Hermitian|IO|IOBuffer|IOContext|IOStream|IPAddr|IPv4|IPv6|IndexCartesian|IndexLinear|IndexStyle|InexactError|InitError|Int|Int128|Int16|Int32|Int64|Int8|Integer|InterruptException|InvalidStateException|Irrational|KeyError|LabelNode|LinSpace|LineNumberNode|LinearIndices|LoadError|LowerTriangular|MIME|Matrix|MersenneTwister|Method|MethodError|MethodTable|Missing|MissingException|Module|NTuple|NamedTuple|NewvarNode|Nothing|Number|ObjectIdDict|OrdinalRange|OutOfMemoryError|OverflowError|Pair|PartialQuickSort|PermutedDimsArray|Pipe|Ptr|QuoteNode|RandomDevice|Rational|RawFD|ReadOnlyMemoryError|Real|ReentrantLock|Ref|Regex|RegexMatch|RoundingMode|RowVector|SSAValue|SegmentationFault|SerializationState|Set|Signed|SimpleVector|Slot|SlotNumber|Some|SparseMatrixCSC|SparseVector|StackFrame|StackOverflowError|StackTrace|StepRange|StepRangeLen|StridedArray|StridedMatrix|StridedVecOrMat|StridedVector|String|StringIndexError|SubArray|SubString|SymTridiagonal|Symbol|Symmetric|SystemError|TCPSocket|Task|Text|TextDisplay|Timer|Transpose|Tridiagonal|Tuple|Type|TypeError|TypeMapEntry|TypeMapLevel|TypeName|TypeVar|TypedSlot|UDPSocket|UInt|UInt128|UInt16|UInt32|UInt64|UInt8|UndefRefError|UndefVarError|UniformScaling|Uninitialized|Union|UnionAll|UnitRange|Unsigned|UpperTriangular|Val|Vararg|VecElement|VecOrMat|Vector|VersionNumber|WeakKeyDict|WeakRef|equalto)\b

  # julia> using Unicode
  # julia> join(filter!(x -> isascii(x[1]) && isalpha(x[1]) && islower(x[1]), map(string, filter!(x -> !Base.isdeprecated(Base, x), [names(Base); names(Core)]))), '|')
  base_funcs: (?:abs|abs2|abspath|accept|accumulate|accumulate!|acos|acos_fast|acosd|acosh|acosh_fast|acot|acotd|acoth|acsc|acscd|acsch|adjoint|adjoint!|all|all!|allunique|angle|angle_fast|any|any!|append!|apropos|ascii|asec|asecd|asech|asin|asin_fast|asind|asinh|asinh_fast|assert|asyncmap|asyncmap!|atan|atan2|atan2_fast|atan_fast|atand|atanh|atanh_fast|atexit|atreplinit|axes|backtrace|base|basename|beta|big|bin|bind|binomial|bitbroadcast|bitrand|bits|bitstring|bkfact|bkfact!|blkdiag|broadcast|broadcast!|broadcast_getindex|broadcast_setindex!|bswap|bytes2hex|cat|catch_backtrace|catch_stacktrace|cbrt|cbrt_fast|cd|ceil|cfunction|cglobal|charwidth|checkbounds|checkindex|chmod|chol|cholfact|cholfact!|chomp|chop|chown|chr2ind|circcopy!|circshift|circshift!|cis|cis_fast|clamp|clamp!|cld|clipboard|close|cmp|coalesce|code_llvm|code_lowered|code_native|code_typed|code_warntype|codeunit|codeunits|collect|colon|complex|cond|condskeel|conj|conj!|connect|consume|contains|convert|copy|copy!|copysign|copyto!|cor|cos|cos_fast|cosc|cosd|cosh|cosh_fast|cospi|cot|cotd|coth|count|count_ones|count_zeros|countlines|countnz|cov|cp|cross|csc|cscd|csch|ctime|ctranspose|ctranspose!|cummax|cummin|cumprod|cumprod!|cumsum|cumsum!|current_module|current_task|dec|deepcopy|deg2rad|delete!|deleteat!|den|denominator|deserialize|det|detach|diag|diagind|diagm|diff|digits|digits!|dirname|disable_sigint|display|displayable|displaysize|div|divrem|done|dot|download|dropzeros|dropzeros!|dump|eachindex|eachline|eachmatch|edit|eig|eigfact|eigfact!|eigmax|eigmin|eigvals|eigvals!|eigvecs|eltype|empty|empty!|endof|endswith|enumerate|eof|eps|equalto|error|esc|escape_string|evalfile|exit|exp|exp10|exp10_fast|exp2|exp2_fast|exp_fast|expand|expanduser|expm|expm!|expm1|expm1_fast|exponent|extrema|eye|factorial|factorize|falses|fd|fdio|fetch|fieldcount|fieldname|fieldnames|fieldoffset|filemode|filesize|fill|fill!|filter|filter!|finalize|finalizer|find|findfirst|findin|findlast|findmax|findmax!|findmin|findmin!|findn|findnext|findnz|findprev|first|fld|fld1|fldmod|fldmod1|flipbits!|flipdim|flipsign|float|floor|flush|fma|foldl|foldr|foreach|frexp|full|fullname|functionloc|gamma|gc|gc_enable|gcd|gcdx|gensym|get|get!|get_zero_subnormals|getaddrinfo|getalladdrinfo|gethostname|getindex|getipaddr|getkey|getnameinfo|getpeername|getpid|getsockname|givens|gperm|gradient|hash|haskey|hcat|hessfact|hessfact!|hex|hex2bytes|hex2bytes!|hex2num|homedir|htol|hton|hvcat|hypot|hypot_fast|identity|ifelse|ignorestatus|im|imag|in|include_dependency|include_string|ind2chr|ind2sub|indexin|indices|indmax|indmin|info|insert!|instances|intersect|intersect!|inv|invmod|invperm|invpermute!|ipermute!|ipermutedims|is|is_apple|is_bsd|is_linux|is_unix|is_windows|isabspath|isapprox|isascii|isassigned|isbits|isblockdev|ischardev|isconcrete|isconst|isdiag|isdir|isdirpath|isempty|isequal|iseven|isfifo|isfile|isfinite|ishermitian|isimag|isimmutable|isinf|isinteger|isinteractive|isleaftype|isless|islink|islocked|ismarked|ismatch|ismissing|ismount|isnan|isodd|isone|isopen|ispath|isperm|isposdef|isposdef!|ispow2|isqrt|isreadable|isreadonly|isready|isreal|issetgid|issetuid|issocket|issorted|issparse|issticky|issubnormal|issubset|issubtype|issymmetric|istaskdone|istaskstarted|istextmime|istril|istriu|isvalid|iswritable|iszero|join|joinpath|keys|keytype|kill|kron|last|lbeta|lcm|ldexp|ldltfact|ldltfact!|leading_ones|leading_zeros|length|less|lexcmp|lexless|lfact|lgamma|lgamma_fast|linearindices|linreg|linspace|listen|listenany|lock|log|log10|log10_fast|log1p|log1p_fast|log2|log2_fast|log_fast|logabsdet|logdet|logging|logm|logspace|lpad|lq|lqfact|lqfact!|lstat|lstrip|ltoh|lu|lufact|lufact!|lyap|macroexpand|map|map!|mapfoldl|mapfoldr|mapreduce|mapreducedim|mapslices|mark|match|matchall|max|max_fast|maxabs|maximum|maximum!|maxintfloat|mean|mean!|median|median!|merge|merge!|method_exists|methods|methodswith|middle|midpoints|mimewritable|min|min_fast|minabs|minimum|minimum!|minmax|minmax_fast|missing|mkdir|mkpath|mktemp|mktempdir|mod|mod1|mod2pi|modf|module_name|module_parent|mtime|muladd|mv|names|nb_available|ncodeunits|ndigits|ndims|next|nextfloat|nextind|nextpow|nextpow2|nextprod|nnz|nonzeros|norm|normalize|normalize!|normpath|notify|ntoh|ntuple|nullspace|num|num2hex|numerator|nzrange|object_id|oct|oftype|one|ones|oneunit|open|operm|ordschur|ordschur!|pairs|parent|parentindexes|parentindices|parse|partialsort|partialsort!|partialsortperm|partialsortperm!|peakflops|permute|permute!|permutedims|permutedims!|pi|pinv|pipeline|pointer|pointer_from_objref|pop!|popdisplay|popfirst!|position|pow_fast|powermod|precision|precompile|prepend!|prevfloat|prevind|prevpow|prevpow2|print|print_shortest|print_with_color|println|process_exited|process_running|prod|prod!|produce|promote|promote_rule|promote_shape|promote_type|push!|pushdisplay|pushfirst!|put!|pwd|qr|qrfact|qrfact!|quantile|quantile!|quit|rad2deg|rand|rand!|randcycle|randcycle!|randexp|randexp!|randjump|randn|randn!|randperm|randperm!|randstring|randsubseq|randsubseq!|range|rank|rationalize|read|read!|readandwrite|readavailable|readbytes!|readchomp|readdir|readline|readlines|readlink|readstring|readuntil|real|realmax|realmin|realpath|recv|recvfrom|redirect_stderr|redirect_stdin|redirect_stdout|redisplay|reduce|reducedim|reenable_sigint|reim|reinterpret|reload|relpath|rem|rem2pi|repeat|replace|replace!|repmat|repr|reprmime|reset|reshape|resize!|rethrow|retry|reverse|reverse!|reverseind|rm|rol|rol!|ror|ror!|rot180|rotl90|rotr90|round|rounding|rowvals|rpad|rsearch|rsearchindex|rsplit|rstrip|run|scale!|schedule|schur|schurfact|schurfact!|search|searchindex|searchsorted|searchsortedfirst|searchsortedlast|sec|secd|sech|seek|seekend|seekstart|select|select!|selectperm|selectperm!|send|serialize|set_zero_subnormals|setdiff|setdiff!|setenv|setindex!|setprecision|setrounding|shift!|show|showall|showcompact|showerror|shuffle|shuffle!|sign|signbit|signed|signif|significand|similar|sin|sin_fast|sinc|sincos|sind|sinh|sinh_fast|sinpi|size|sizehint!|sizeof|skip|skipchars|skipmissing|sleep|slicedim|sort|sort!|sortcols|sortperm|sortperm!|sortrows|sparse|sparsevec|spawn|spdiagm|speye|splice!|split|splitdir|splitdrive|splitext|spones|sprand|sprandn|sprint|spzeros|sqrt|sqrt_fast|sqrtm|squeeze|srand|stacktrace|start|startswith|stat|std|stdm|step|stride|strides|string|stringmime|strip|strwidth|sub2ind|subtypes|success|sum|sum!|sumabs|sumabs2|summary|supertype|svd|svdfact|svdfact!|svdvals|svdvals!|sylvester|symdiff|symdiff!|symlink|systemerror|take!|takebuf_array|takebuf_string|tan|tan_fast|tand|tanh|tanh_fast|task_local_storage|tempdir|tempname|thisind|tic|time|time_ns|timedwait|to_indices|toc|toq|touch|trace|trailing_ones|trailing_zeros|transcode|transpose|transpose!|tril|tril!|triu|triu!|trues|trunc|truncate|trylock|tryparse|typeintersect|typejoin|typemax|typemin|unescape_string|union|union!|unique|unique!|unlock|unmark|unsafe_copy!|unsafe_copyto!|unsafe_load|unsafe_pointer_to_objref|unsafe_read|unsafe_store!|unsafe_string|unsafe_trunc|unsafe_wrap|unsafe_write|unshift!|unsigned|uperm|valtype|values|var|varinfo|varm|vcat|vec|vecdot|vecnorm|versioninfo|view|wait|walkdir|warn|which|whos|widemul|widen|withenv|workspace|write|xor|yield|yieldto|zero|zeros|zip|applicable|eval|fieldtype|getfield|invoke|isa|isdefined|nfields|nothing|setfield!|throw|tuple|typeassert|typeof|uninitialized)(?!{{symb_id}})

  # julia> using Unicode
  # julia> join(string.(filter!(x -> isa(eval(x), Module) && !Base.isdeprecated(Base, x), [names(Base); names(Core)])), "|")
  base_modules: \b(?:BLAS|Base|Broadcast|DFT|Docs|Iterators|LAPACK|LibGit2|Libc|Libdl|LinAlg|Markdown|Meta|Operators|Pkg|Serializer|SparseArrays|StackTraces|Sys|Threads|Core|Main)\b

  # Highlight exported functions from base modules
  # julia> using Unicode
  # julia> base_modules = filter!(x -> isa(eval(x), Module) && x != :Main && !Base.isdeprecated(Base, x), [names(Base); names(Core)])
  # julia> modulefunctions(m) = join(filter!(x -> isascii(x[1]) && isalpha(x[1]) && islower(x[1]), string.(names(eval(m)))), "|")
  # julia> regexify(m) = "$(string(m))\\.(?:$(modulefunctions(m)))"
  # julia> rows = join(regexify.(base_modules), "|")
  # julia> print("(<!\\.)(?:$rows)(?!{{symb_id}})")
  base_module_func: (?<!\.)(?:BLAS\.(?:asum|axpby!|axpy!|blascopy!|dot|dotc|dotu|gbmv|gbmv!|gemm|gemm!|gemv|gemv!|ger!|hemm|hemm!|hemv|hemv!|her!|her2k|her2k!|herk|herk!|iamax|nrm2|sbmv|sbmv!|scal|scal!|symm|symm!|symv|symv!|syr!|syr2k|syr2k!|syrk|syrk!|trmm|trmm!|trmv|trmv!|trsm|trsm!|trsv|trsv!)|Base\.(?:abs|abs2|abspath|accept|accumulate|accumulate!|acos|acos_fast|acosd|acosh|acosh_fast|acot|acotd|acoth|acsc|acscd|acsch|adjoint|adjoint!|all|all!|allunique|angle|angle_fast|any|any!|append!|apropos|ascii|asec|asecd|asech|asin|asin_fast|asind|asinh|asinh_fast|assert|asyncmap|asyncmap!|atan|atan2|atan2_fast|atan_fast|atand|atanh|atanh_fast|atexit|atreplinit|axes|backtrace|base|basename|beta|bfft|bfft!|big|bin|bind|binomial|bitbroadcast|bitrand|bits|bitstring|bkfact|bkfact!|blkdiag|brfft|broadcast|broadcast!|broadcast_getindex|broadcast_setindex!|bswap|bytes2hex|cat|catch_backtrace|catch_stacktrace|cbrt|cbrt_fast|cd|ceil|cfunction|cglobal|charwidth|checkbounds|checkindex|chmod|chol|cholfact|cholfact!|chomp|chop|chown|chr2ind|circcopy!|circshift|circshift!|cis|cis_fast|clamp|clamp!|cld|clipboard|close|cmp|coalesce|code_llvm|code_lowered|code_native|code_typed|code_warntype|codeunit|codeunits|collect|colon|complex|cond|condskeel|conj|conj!|connect|consume|contains|conv|conv2|convert|copy|copy!|copysign|copyto!|cor|cos|cos_fast|cosc|cosd|cosh|cosh_fast|cospi|cot|cotd|coth|count|count_ones|count_zeros|countlines|countnz|cov|cp|cross|csc|cscd|csch|ctime|ctranspose|ctranspose!|cummax|cummin|cumprod|cumprod!|cumsum|cumsum!|current_module|current_task|dct|dct!|dec|deconv|deepcopy|deg2rad|delete!|deleteat!|den|denominator|deserialize|det|detach|diag|diagind|diagm|diff|digits|digits!|dirname|disable_sigint|display|displayable|displaysize|div|divrem|done|dot|download|dropzeros|dropzeros!|dump|eachindex|eachline|eachmatch|edit|eig|eigfact|eigfact!|eigmax|eigmin|eigvals|eigvals!|eigvecs|eltype|empty|empty!|endof|endswith|enumerate|eof|eps|equalto|error|esc|escape_string|evalfile|exit|exp|exp10|exp10_fast|exp2|exp2_fast|exp_fast|expand|expanduser|expm|expm!|expm1|expm1_fast|exponent|extrema|eye|factorial|factorize|falses|fd|fdio|fetch|fft|fft!|fftshift|fieldcount|fieldname|fieldnames|fieldoffset|filemode|filesize|fill|fill!|filt|filt!|filter|filter!|finalize|finalizer|find|findfirst|findin|findlast|findmax|findmax!|findmin|findmin!|findn|findnext|findnz|findprev|first|fld|fld1|fldmod|fldmod1|flipbits!|flipdim|flipsign|float|floor|flush|fma|foldl|foldr|foreach|frexp|full|fullname|functionloc|gamma|gc|gc_enable|gcd|gcdx|gensym|get|get!|get_zero_subnormals|getaddrinfo|getalladdrinfo|gethostname|getindex|getipaddr|getkey|getnameinfo|getpeername|getpid|getsockname|givens|gperm|gradient|hash|haskey|hcat|hessfact|hessfact!|hex|hex2bytes|hex2bytes!|hex2num|homedir|htol|hton|hvcat|hypot|hypot_fast|idct|idct!|identity|ifelse|ifft|ifft!|ifftshift|ignorestatus|im|imag|in|include_dependency|include_string|ind2chr|ind2sub|indexin|indices|indmax|indmin|info|insert!|instances|intersect|intersect!|inv|invmod|invperm|invpermute!|ipermute!|ipermutedims|irfft|is|is_apple|is_bsd|is_linux|is_unix|is_windows|isabspath|isapprox|isascii|isassigned|isbits|isblockdev|ischardev|isconcrete|isconst|isdiag|isdir|isdirpath|isempty|isequal|iseven|isfifo|isfile|isfinite|ishermitian|isimag|isimmutable|isinf|isinteger|isinteractive|isleaftype|isless|islink|islocked|ismarked|ismatch|ismissing|ismount|isnan|isodd|isone|isopen|ispath|isperm|isposdef|isposdef!|ispow2|isqrt|isreadable|isreadonly|isready|isreal|issetgid|issetuid|issocket|issorted|issparse|issticky|issubnormal|issubset|issubtype|issymmetric|istaskdone|istaskstarted|istextmime|istril|istriu|isvalid|iswritable|iszero|join|joinpath|keys|keytype|kill|kron|last|lbeta|lcm|ldexp|ldltfact|ldltfact!|leading_ones|leading_zeros|length|less|lexcmp|lexless|lfact|lgamma|lgamma_fast|linearindices|linreg|linspace|listen|listenany|lock|log|log10|log10_fast|log1p|log1p_fast|log2|log2_fast|log_fast|logabsdet|logdet|logging|logm|logspace|lpad|lq|lqfact|lqfact!|lstat|lstrip|ltoh|lu|lufact|lufact!|lyap|macroexpand|map|map!|mapfoldl|mapfoldr|mapreduce|mapreducedim|mapslices|mark|match|matchall|max|max_fast|maxabs|maximum|maximum!|maxintfloat|mean|mean!|median|median!|merge|merge!|method_exists|methods|methodswith|middle|midpoints|mimewritable|min|min_fast|minabs|minimum|minimum!|minmax|minmax_fast|missing|mkdir|mkpath|mktemp|mktempdir|mod|mod1|mod2pi|modf|module_name|module_parent|mtime|muladd|mv|names|nb_available|ncodeunits|ndigits|ndims|next|nextfloat|nextind|nextpow|nextpow2|nextprod|nnz|nonzeros|norm|normalize|normalize!|normpath|notify|ntoh|ntuple|nullspace|num|num2hex|numerator|nzrange|object_id|oct|oftype|one|ones|oneunit|open|operm|ordschur|ordschur!|pairs|parent|parentindexes|parentindices|parse|partialsort|partialsort!|partialsortperm|partialsortperm!|peakflops|permute|permute!|permutedims|permutedims!|pi|pinv|pipeline|plan_bfft|plan_bfft!|plan_brfft|plan_dct|plan_dct!|plan_fft|plan_fft!|plan_idct|plan_idct!|plan_ifft|plan_ifft!|plan_irfft|plan_rfft|pointer|pointer_from_objref|pop!|popdisplay|popfirst!|position|pow_fast|powermod|precision|precompile|prepend!|prevfloat|prevind|prevpow|prevpow2|print|print_shortest|print_with_color|println|process_exited|process_running|prod|prod!|produce|promote|promote_rule|promote_shape|promote_type|push!|pushdisplay|pushfirst!|put!|pwd|qr|qrfact|qrfact!|quantile|quantile!|quit|rad2deg|rand|rand!|randcycle|randcycle!|randexp|randexp!|randjump|randn|randn!|randperm|randperm!|randstring|randsubseq|randsubseq!|range|rank|rationalize|read|read!|readandwrite|readavailable|readbytes!|readchomp|readdir|readline|readlines|readlink|readstring|readuntil|real|realmax|realmin|realpath|recv|recvfrom|redirect_stderr|redirect_stdin|redirect_stdout|redisplay|reduce|reducedim|reenable_sigint|reim|reinterpret|reload|relpath|rem|rem2pi|repeat|replace|replace!|repmat|repr|reprmime|reset|reshape|resize!|rethrow|retry|reverse|reverse!|reverseind|rfft|rm|rol|rol!|ror|ror!|rot180|rotl90|rotr90|round|rounding|rowvals|rpad|rsearch|rsearchindex|rsplit|rstrip|run|scale!|schedule|schur|schurfact|schurfact!|search|searchindex|searchsorted|searchsortedfirst|searchsortedlast|sec|secd|sech|seek|seekend|seekstart|select|select!|selectperm|selectperm!|send|serialize|set_zero_subnormals|setdiff|setdiff!|setenv|setindex!|setprecision|setrounding|shift!|show|showall|showcompact|showerror|shuffle|shuffle!|sign|signbit|signed|signif|significand|similar|sin|sin_fast|sinc|sincos|sind|sinh|sinh_fast|sinpi|size|sizehint!|sizeof|skip|skipchars|skipmissing|sleep|slicedim|sort|sort!|sortcols|sortperm|sortperm!|sortrows|sparse|sparsevec|spawn|spdiagm|speye|splice!|split|splitdir|splitdrive|splitext|spones|sprand|sprandn|sprint|spzeros|sqrt|sqrt_fast|sqrtm|squeeze|srand|stacktrace|start|startswith|stat|std|stdm|step|stride|strides|string|stringmime|strip|strwidth|sub2ind|subtypes|success|sum|sum!|sumabs|sumabs2|summary|supertype|svd|svdfact|svdfact!|svdvals|svdvals!|sylvester|symdiff|symdiff!|symlink|systemerror|take!|takebuf_array|takebuf_string|tan|tan_fast|tand|tanh|tanh_fast|task_local_storage|tempdir|tempname|thisind|tic|time|time_ns|timedwait|to_indices|toc|toq|touch|trace|trailing_ones|trailing_zeros|transcode|transpose|transpose!|tril|tril!|triu|triu!|trues|trunc|truncate|trylock|tryparse|typeintersect|typejoin|typemax|typemin|unescape_string|union|union!|unique|unique!|unlock|unmark|unsafe_copy!|unsafe_copyto!|unsafe_load|unsafe_pointer_to_objref|unsafe_read|unsafe_store!|unsafe_string|unsafe_trunc|unsafe_wrap|unsafe_write|unshift!|unsigned|uperm|valtype|values|var|varinfo|varm|vcat|vec|vecdot|vecnorm|versioninfo|view|wait|walkdir|warn|which|whos|widemul|widen|withenv|workspace|write|xcorr|xor|yield|yieldto|zero|zeros|zip)|Broadcast\.(?:broadcast_getindex|broadcast_indices|broadcast_setindex!|broadcast_similar|dotview)|DFT\.(?:)|Docs\.(?:apropos|doc)|Iterators\.(?:countfrom|cycle|drop|enumerate|flatten|partition|product|repeated|rest|take|zip)|LAPACK\.(?:)|LibGit2\.(?:get_creds!|with)|Libc\.(?:calloc|errno|flush_cstdio|free|gethostname|getpid|malloc|realloc|strerror|strftime|strptime|systemsleep|time|transcode)|Libdl\.(?:dlclose|dlext|dllist|dlopen|dlopen_e|dlpath|dlsym|dlsym_e|find_library)|LinAlg\.(?:adjoint|adjoint!|axpby!|axpy!|bkfact|bkfact!|chol|cholfact|cholfact!|cond|condskeel|copy_transpose!|copyto!|cross|det|diag|diagind|diagm|diff|dot|eig|eigfact|eigfact!|eigmax|eigmin|eigvals|eigvals!|eigvecs|factorize|getq|givens|gradient|hessfact|hessfact!|isdiag|ishermitian|isposdef|isposdef!|issuccess|issymmetric|istril|istriu|kron|ldltfact|ldltfact!|linreg|logabsdet|logdet|lq|lqfact|lqfact!|lu|lufact|lufact!|lyap|norm|normalize|normalize!|nullspace|ordschur|ordschur!|peakflops|pinv|qr|qrfact|qrfact!|rank|scale!|schur|schurfact|schurfact!|svd|svdfact|svdfact!|svdvals|svdvals!|sylvester|trace|transpose|transpose!|transpose_type|tril|tril!|triu|triu!|vecdot|vecnorm)|Markdown\.(?:html|latex|license|readme)|Meta\.(?:isexpr|quot|show_sexpr)|Operators\.(?:)|Pkg\.(?:add|available|build|checkout|clone|dir|free|init|installed|pin|resolve|rm|setprotocol!|status|test|update)|Serializer\.(?:deserialize|serialize)|SparseArrays\.(?:blkdiag|droptol!|dropzeros|dropzeros!|issparse|nnz|nonzeros|nzrange|permute|rowvals|sparse|sparsevec|spdiagm|spones|sprand|sprandn|spzeros)|StackTraces\.(?:catch_stacktrace|stacktrace)|Sys\.(?:cpu_info|cpu_summary|free_memory|isapple|isbsd|islinux|isunix|iswindows|loadavg|total_memory|uptime)|Threads\.(?:atomic_add!|atomic_and!|atomic_cas!|atomic_fence|atomic_max!|atomic_min!|atomic_nand!|atomic_or!|atomic_sub!|atomic_xchg!|atomic_xor!|nthreads|threadid)|Core\.(?:applicable|eval|fieldtype|getfield|invoke|isa|isdefined|nfields|nothing|setfield!|throw|tuple|typeassert|typeof|uninitialized))(?!{{symb_id}})

  # Symbols part of the language syntax
  symb_lang: (?:[(){}\[\],.;:'"`@#])

  # General identifier symbol
  symb_id: (?:[^\s{{symb_lang}}{{symb_op}}])

  # Alternative to \b that works with unicode symbols
  b: (?<=(?:^|\s|{{symb_lang}}|{{symb_op}}))

  # Recursively match nested curly braces
  # Must be wrapped in a matching group when used. It is best to do this explicitly when used (not here) to avoid confusion.
  # This regex depends on atomic group and back reference recursion.
  # Cannot match multi-line types, because sublime applies regexes line by line.
  # TODO: Parse multi-line types separately with push/pop matching. Omg pls no! {nested_curly} is used in 10 places and push/pop would make the code very messy. Who uses multi-line types anyway?
  nested_curly: '{(?>[^{}]+|\g<-1>)*}'
  # Don't use the following ones for lookaheads! May lead to unwanted matches.
  # These match unfinished nested braces, to highlight during typing.
  nested_curly_sloppy: '(?:{(?>[^{}]+|\g<-1>)*}|\{[^\}\)\] ]*)'
  nested_curly_and_round_sloppy: (?:(?>{(?>[^{}]+|\g<-1>)*}|\((?>[^()]+|\g<-1>)*\))|[\{\(][^\}\)\] ]*)

  # Recursively match nested brackets (of any type) and strings
  # Must be wrapped in a matching group when used. It is best to do this explicitly when used (not here) to avoid confusion.
  # NOTE: Use of atomic groups speeds up parsing immensely.
  string: '"(?>(?>\\"|[^"])*|\g<-1>)*"'
  nested_brackets_and_strings: |-
    (?x)
    (?>
       {(?>{{string}}|[^{}]+|\g<-1>)*}|
      \((?>{{string}}|[^()]+|\g<-1>)*\)|
      \[(?>{{string}}|[^\[\]]+|\g<-1>)*\]|
      {{string}}
    )

  # Helpers for function declaration
  type_comparison_regex: (\$?{{symb_id}}+({{nested_curly_and_round_sloppy}})?)\s*(<:|>:)\s*((?:(?!\.\.)(?:[$.]|{{symb_id}}))+({{nested_curly_and_round_sloppy}})?)
  func_name_standard: |-
    (?x)
    (?!!)                     # Function name doesn't start with !
    ([^\s{{symb_lang}}]+)     # Function name
    ({{nested_curly}})?       # Match type annotation
    (?=[\( ])
  func_name_paren: |-
    (?x)
    \(                        # Function name is wrapped in parentheses
    (?!!)                     # Function name doesn't start with !
    (::)?                     # Function name can start with ::
    ((?:                      # Rest of function name
      ({{nested_curly}})|     # Match nested curly brackets
      [^)]                    # or anything that doesn't close paren
    )+)
    \)
    ({{nested_curly}})?       # Match type annotation
    (?=\()
  func_params: |-
    (?x)
    \(                        # Open function parameters
    # We are lazy here and don't parse the exact form of a parameter list
    # with types, default values, splats etc. It is not needed.
    (
      ({{nested_brackets_and_strings}})| # Match nested brackets, can occur in parameter default value etc.
      [^(){}\[\]"]            # or anything that doesn't close the argument list
    )*
    \)                        # Close function parameters
    (                         # Allow where keyword
      \s*where\s+
      (
        {{type_comparison_regex}}|
        {{nested_curly}}|
        {{symb_id}}+
      )
    )*
    \s*=(?!=)                 # Followed by exactly one equal sign

contexts:
  main:
    - include: declarations
    - include: expressions

  expressions:
    - include: comments
    - include: symbols
    - include: type-annotation
    - include: type-comparison
    - include: literals
    - include: operators
    - include: strings
    - include: keywords
    - include: macros
    - include: support-functions
    - include: function-call
    - include: anonymous-function
    - include: variable
    - include: nested_parens
    - include: nested_squarebrackets

  declarations:
    - include: decl-func
    - include: decl-func-assignment-form
    - include: decl-type
    - include: decl-macro

  comments:
    - match: '#='
      push: comment-block
    - match: '#.*'
      scope: comment.line.number-sign.julia

  comment-block:
    - meta_scope: comment.block.number-sign-equals.julia
    - match: '#='
      push: comment-block
    - match: '=#'
      pop: true

  keywords:
    - match: \b(begin|end|function|macro|quote|let|local|global|const|abstract|module|baremodule|using|import|export|in)\b
      scope: keyword.other.julia
    - match: \b(if|else|elseif|for|while|do|try|catch|finally|return|break|continue)\b
      scope: keyword.control.julia

  operators:
    # Bang is not only an operator symbol, it can also be part of a function name, thus it is treated separately.
    # Single quote is not only an operator symbol, it can also start a string. It is an operator if it is preceded by an identifier, dot, single-quote, right round bracket or right square bracket
    - match: (\.?)({{long_op}})
      captures:
        1: keyword.operator.broadcast.julia
        2: keyword.operator.julia
    - match: (\.?)(=)
      captures:
        1: keyword.operator.broadcast.julia
        2: keyword.operator.assignment.julia
    - match: (\.)({{symb_op}}|')
      captures:
        1: keyword.operator.broadcast.julia
        2: keyword.operator.julia
    - match: |-
        (?x)
        (
          {{symb_op}}|
          !|
          (?<=
            (
              {{symb_id}}|
              [.')\]]
            )
          )
          '
        )
      scope: keyword.operator.julia

  support-functions:
    - match: '(?={{base_module_func}}\.?({{nested_curly}})?\()'
      push:
        - match: ({{base_modules}})\.
          captures:
            1: support.module.julia
        - match: (?<=\.)({{symb_id}}+)
          scope: variable.function.julia support.function.julia meta.function-call.julia
          push: function-call-helper
        - match: ''
          pop: true
    - match: '(?={{base_module_func}})'
      push:
        - match: ({{symb_id}}+)\.
          captures:
            1: support.module.julia
        - match: (?<=\.)({{symb_id}}+)
          scope: variable.function.julia support.function.julia
        - match: ''
          pop: true

  function-call:
    - match: '(?<!\.)(?={{symb_id}}+\.?({{nested_curly}})?\()'
      push:
        - meta_content_scope: meta.function-call.julia
        # Built-in function
        - match: '{{base_funcs}}'
          scope: variable.function.julia support.function.julia
        - include: function-call-helper
        - match: ''
          pop: true
    - match: '(?=({{symb_id}}+)\.?({{nested_curly}})?\()'
      push: function-call-helper

  function-call-helper:
    - meta_content_scope: meta.function-call.julia
    # Function
    - match: '{{symb_id}}+'
      scope: variable.function.julia
    # Type
    - match: ({{nested_curly}})
      scope: support.type.julia
    # Broadcast
    - match: '\.'
      scope: keyword.operator.broadcast.julia
    # Begin arguments
    - match: \(
      set:
        - meta_content_scope: meta.function-call.arguments.julia
        - match: '({{symb_id}}+)\s*(=)'
          captures:
            1: variable.parameter.julia
            2: keyword.operator.assignment.julia
        - include: expressions
        # End arguments and function call
        - match: \)
          scope: meta.function-call.julia
          pop: true

  literals:
    - match: |-
        (?x)
        (?: # Dashes betwen numeric symbols (11 = 1_1) are allowed everywhere.
          {{b}}0b[0-1](?:_?[0-1])*|             # binary
          {{b}}0o[0-7](?:_?[0-7])*|             # octal
          {{b}}0x[\da-fA-F](?:_?[\da-fA-F])*|   # hex
          {{b}}(?:
            \.\d(?:_?\d)*|                      # .11, .11
            \d(?:_?\d)*(?:\.(?:\d(?:_?\d)*)?)?  # 11.11, 11., 11
          )
          (?:e[-+]?\d(?:_?\d)*)?                # Any of the above followed by e+123 or similar, for scientific notation.
        )
      scope: constant.numeric.julia
    - match: \b(true|false|nothing|missing|ℯ|pi|π|im|uninitialized|NaN|NaN16|NaN32|NaN64|Inf|Inf16|Inf32|Inf64|ARGS|C_NULL|ENDIAN_BOM|ENV|LOAD_PATH|PROGRAM_FILE|STDERR|STDIN|STDOUT|VERSION)\b
      scope: constant.language.julia

  type-annotation:
    # Dollar is ok because types can be interpolated.
    # Dot is ok because types can be picked from modules,
    # but no more than one dot, because splat can follow type.
    - match: (::)\s*((?:(?!\.\.)(?:[$.]|{{symb_id}}))*({{nested_curly_and_round_sloppy}})?)\s*(where)\s+
      captures:
        1: keyword.operator.julia
        2: support.type.julia
        4: keyword.other.julia
      push: where-type
    - match: (::|<:|>:)\s*((?:(?!\.\.)(?:[$.]|{{symb_id}}))*({{nested_curly_and_round_sloppy}})?)
      captures:
        1: keyword.operator.julia
        2: support.type.julia

  type-comparison:
    - match: '{{type_comparison_regex}}'
      captures:
        1: support.type.julia
        3: keyword.operator.julia
        4: support.type.julia

  where-type:
    - match: (\{){{type_comparison_regex}}(\})
      captures:
        1: support.type.julia
        2: support.type.julia
        4: keyword.operator.julia
        5: support.type.julia
        7: support.type.julia
    - match: '{{type_comparison_regex}}'
      captures:
        1: support.type.julia
        3: keyword.operator.julia
        4: support.type.julia
    - match: '({{nested_curly_sloppy}})'
      scope: support.type.julia
    - match: '{{symb_id}}+'
      scope: support.type.julia
    - match: \s*(where)\s+
      captures:
        1: keyword.other.julia
      push: where-type
    - match: ''
      pop: true

  decl-func:
    - match: '\b(?<!:)(function)\s+(?!@)'
      captures:
        1: keyword.other.julia
      push:
        - meta_scope: meta.function.julia
        - include: func-name-paren
        - include: func-name-standard
        # Anonymous function
        - match: \(
          set: function-parameters
        # Function name on the form "Module.func"
        - match: '([^.{(]+)(\.)'
          captures:
            1: variable.other.julia
            2: keyword.operator.julia

  anonymous-function:
    - match: '(?=({{nested_brackets_and_strings}})\s*->)'
      set: function-parameters
    - match: '({{symb_id}}+)(::)?({{symb_id}}+)?({{nested_curly}})?\s*(->)'
      captures:
        1: variable.parameter
        2: keyword.operator
        3: support.type
        4: support.type
        5: keyword.operator
    - match: '({{symb_id}}+)\s*(->)'
      captures:
        1: variable.parameter
        2: keyword.operator

  # Do lookaheads to distinguish function calls from function definitions on assignment form
  decl-func-assignment-form:
    - match: |-
        (?x)
        (?=
          {{func_name_paren}}
          {{func_params}}
        )
      push: func-name-paren
    - match: |-
        (?x)
        (?=
          {{func_name_standard}}
          {{func_params}}
        )
      push: func-name-standard
    - match: |-
        (?x)
        (?=
          (?!!)
          ([^\s{{symb_lang}}]+\.)+
          {{func_name_standard}}
          {{func_params}}
        )
      push:
        - match: '({{base_modules}})\.(?=[^\s{{symb_lang}}])'
          captures:
            1: support.module.julia
          push: func-name-standard
          pop: true
        - match: '(([^\s{{symb_lang}}]+\.)+)(?=[^\s{{symb_lang}}])'
          captures:
            1: variable.other.julia
          push: func-name-standard
          pop: true

  func-name-standard:
    - match: '{{func_name_standard}}'
      captures:
        1: entity.name.function.julia
        2: support.type.julia
      set: function-parameters

  func-name-paren:
    - match: '{{func_name_paren}}'
      captures:
        1: keyword.operator.julia
        2: entity.name.function.julia
        4: support.type.julia
      set: function-parameters

  function-parameters:
    - meta_content_scope: meta.function.parameters.julia
    - match: end
      scope: keyword.other
      pop: true
    - match: \)\s*(where)\s+
      captures:
        1: keyword.other
      set: where-type
    - match: \)
      pop: true
    - include: comments
    - match: '='
      scope: keyword.operator.assignment.julia
      set:
        - meta_scope: meta.function.parameters.default-value.julia
        - match: '(?=[,;)])'
          set: function-parameters
        - include: expressions
    - include: type-annotation
    - match: \.\.\. # Splat after type
      scope: keyword.operator.julia
    - match: ({{symb_id}}+)(\.\.\.)?
      captures:
        1: variable.parameter.julia
        2: keyword.operator.julia

  decl-macro:
    - match: '\b(macro)\s+([^(]+)\('
      captures:
        1: keyword.other.julia
        2: entity.name.macro.julia
      set: function-parameters

  decl-type:
    # Dollar is ok because type names can be interpolated.
    - match: \b(?:(mutable)\s+(struct)|(abstract)\s+(type)|(primitive)\s+(type))\s+((?:\$|{{symb_id}})+)({{nested_curly}})?
      scope: meta.type.julia
      captures: # Make this less repetitive?
        1: keyword.other.julia
        2: keyword.other.julia
        3: keyword.other.julia
        4: keyword.other.julia
        5: keyword.other.julia
        6: keyword.other.julia
        7: entity.name.type.julia
        8: support.type.julia
    - match: \b(struct)\s+((?:\$|{{symb_id}})+)({{nested_curly}})?
      scope: meta.type.julia
      captures:
        1: keyword.other.julia
        2: entity.name.type.julia
        3: support.type.julia

  symbols:
    # This is slightly more involved than what one might first expect
    # because, for example, in `:aa` the symbol is `aa` but in `:+a` only `+` is the symbol.
    # Also take some extra steps to not mess up ternary a?b:c syntax.
    - match: |-
        (?x)
        (?<! {{symb_id}}: )   # Not preceded by `a:`
        (?<! {{symb_id}}\s: ) # or `a :` (How to match multiple spaces in lookbehind?)
        (?<! [<)}\].'"]: )    # or other symbol-blocking chars.
        (?<=:)                # Preceeded by colon.
        (                     # The actual symbol can be a
          (\.?{{long_op}})|   # (dotted) multi-character-operator
          (\.?{{symb_op}})|   # (dotted) operator
          @?{{symb_id}}*      # variable (or macro) name
        )
      scope: constant.other.symbol.julia

  macros:
    - match: '@{{symb_id}}+\b'
      # Julians want their macros to light up as functions by default
      # The scope `variable.macro` is applied last to give it precedence
      # so that user can override the color in the color theme.
      scope: support.function.julia variable.macro.julia

  variable:
    - match: '({{symb_id}}+({{nested_curly_sloppy}})?)\s*(where)\s+'
      captures:
        1: support.type.julia
        3: keyword.other.julia
      push: where-type
    - match: '{{symb_id}}+({{nested_curly_sloppy}})'
      scope: support.type.julia
    - match: '{{base_types}}'
      scope: support.type.julia
    - match: '{{base_funcs}}'
      scope: variable.function.julia support.function.julia
    - match: '(?<!\.){{base_modules}}'
      scope: support.module.julia
    - match: '{{symb_id}}+'
      scope: variable.other.julia

  strings:
    # Regex string, tripple-quoted. Has special escaping and no string interpolation.
    - match: '\br"""'
      push:
      - meta_scope: string.quoted.other.julia
      - match: (\\"|\\\\)
        scope: constant.character.escape.julia
      - match: '"""'
        pop: true
    # Regex string. Has special escaping and no string interpolation.
    - match: '\br"'
      push:
      - meta_scope: string.quoted.other.julia
      - match: (\\"|\\\\)
        scope: constant.character.escape.julia
      - match: '"'
        pop: true
    # Triple double-quoted string
    - match: '"""'
      push: string-triple-content
    # Double-quoted
    - match: '"'
      push: string-standard-content
    # Prefixed double-quoted
    - match: '{{symb_id}}+"'
      push:
      - meta_scope: string.quoted.other.julia
      - include: string-escape
      - match: '"'
        pop: true
    # Single-quoted string
    - match: "'"
      push:
      - meta_scope: string.quoted.single.julia
      - include: string-escape
      - match: "'"
        pop: true
    # Cmd string
    - match: '`'
      push: string-cmd-content

  string-escape:
    - match: \\(\\|[0-3]\d{0,2}|[4-7]\d?|x[a-fA-F0-9]{0,2}|u[a-fA-F0-9]{0,4}|U[a-fA-F0-9]{0,8}|.)
      scope: constant.character.escape.julia

  string-standard-content:
    - meta_scope: string.quoted.double.julia
    - match: '"'
      pop: true
    - include: string-escape
    - match: \$
      scope: keyword.operator.julia
      set: string-standard-interpolation

  string-standard-interpolation:
    - match: (?<=\))
      set: string-standard-content
    - include: nested_parens
    - match: '{{symb_id}}+'
      scope: variable.other.julia
      set:
        - match: ''
          set: string-standard-content

  string-triple-content:
    - meta_scope: string.quoted.double.julia
    - match: '"""'
      pop: true
    - include: string-escape
    - match: \$
      scope: keyword.operator.julia
      set: string-triple-interpolation

  string-triple-interpolation:
    - match: (?<=\))
      set: string-triple-content
    - include: nested_parens
    - match: '{{symb_id}}+'
      scope: variable.other.julia
      set:
        - match: ''
          set: string-triple-content

  string-cmd-content:
    - meta_scope: string.quoted.cmd.julia
    - match: '`'
      pop: true
    - include: string-escape
    - match: \$
      scope: keyword.operator.julia
      set: string-cmd-interpolation

  string-cmd-interpolation:
    - match: (?<=\))
      set: string-cmd-content
    - include: nested_parens
    - match: '{{symb_id}}+'
      scope: variable.other.julia
      set:
        - match: ''
          set: string-cmd-content

  nested_parens:
    - match: \(
      push:
        - match: \)
          pop: true
        - include: declarations
        - include: expressions

  nested_squarebrackets:
    - match: \[
      push:
        - match: \]
          pop: true
        - include: expressions
