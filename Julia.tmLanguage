
<!--

	DEPRECATED

	THIS FILE HAS BEEN SUPERSEEDED BY Julia.sublime-syntax

	THIS FILE IS KEPT ONLY FOR COMPATIBILITY WITH OLDER VERSIONS OF SUBLIME TEXT

-->

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
	TODO:
	* syntax types, tuple types, union
	* take out ::Type
	</string>
	<key>fileTypes</key>
	<array>
		<string>jl</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!.*\bjulia\s*$</string>
	<key>keyEquivalent</key>
	<string>^~J</string>
	<key>name</key>
	<string>Julia</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#symbol</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#array</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#bracket</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#number</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type_decl</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function_decl</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function_call</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#keyword</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>array</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>end</key>
					<string>\]((\.)?'*)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.transpose.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.array.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\bend\b</string>
							<key>name</key>
							<string>constant.numeric.julia</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>bracket</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?:\(|\)|\[|\]|,)(?!('|(?:\.'))*\.?')</string>
					<key>name</key>
					<string>meta.bracket.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<!-- <string>(?:\{)(?!('|(?:\.'))*\.?')[^\}]*\}</string> -->
					<string>\{[^\}]*\}</string>
					<key>name</key>
					<string>support.type.julia</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>#=</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>=#</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.number-sign-equals.julia</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.julia</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\$)(#)(?!\{).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.julia</string>
				</dict>
			</array>
		</dict>
		<key>function_call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<!-- A string is highlighted as a function call if it consists of any symbol except `[](){},` and symbols parsed as infix operators. Strings, symbols, number literals and comments are parsed before function calls, so we don't need to take care of these. Note the special handling of the band, this is needed since bang cannot be at the beginning of a function name. -->
					<string>([^\s\[\]\(\)\{\},(?:(?:\:\=|\=\&gt;|~|\$\=|\?|\-\-|\-\-\&gt;|\|\|\&amp;\&amp;|\&lt;\:|\&gt;\:|\.\!|\|\&gt;|\&lt;\||\:|\.\.|\$|\:\:|\.|¬)|\.?(?:\=|\+\=|\-\=|\*\=|/\=|//\=|\=|\^\=|÷\=|%\=|\&lt;\&lt;\=|\&gt;\&gt;\=|\&gt;\&gt;\&gt;\=|\|\=|\&amp;\=|←|→|↔|↚|↛|↠|↣|↦|↮|⇎|⇏|⇒|⇔|⇴|⇶|⇷|⇸|⇹|⇺|⇻|⇼|⇽|⇾|⇿|⟵|⟶|⟷|⟷|⟹|⟺|⟻|⟼|⟽|⟾|⟿|⤀|⤁|⤂|⤃|⤄|⤅|⤆|⤇|⤌|⤍|⤎|⤏|⤐|⤑|⤔|⤕|⤖|⤗|⤘|⤝|⤞|⤟|⤠|⥄|⥅|⥆|⥇|⥈|⥊|⥋|⥎|⥐|⥒|⥓|⥖|⥗|⥚|⥛|⥞|⥟|⥢|⥤|⥦|⥧|⥨|⥩|⥪|⥫|⥬|⥭|⥰|⧴|⬱|⬰|⬲|⬳|⬴|⬵|⬶|⬷|⬸|⬹|⬺|⬻|⬼|⬽|⬾|⬿|⭀|⭁|⭂|⭃|⭄|⭇|⭈|⭉|⭊|⭋|⭌|￩|￫|\&gt;|\&lt;|\&gt;\=|≥|\&lt;\=|≤|\=\=|\=\=\=|≡|\!\=|≠|\!\=\=|≢|∈|∉|∋|∌|⊆|⊈|⊂|⊄|⊊|∝|∊|∍|∥|∦|∷|∺|∻|∽|∾|≁|≃|≄|≅|≆|≇|≈|≉|≊|≋|≌|≍|≎|≐|≑|≒|≓|≔|≕|≖|≗|≘|≙|≚|≛|≜|≝|≞|≟|≣|≦|≧|≨|≩|≪|≫|≬|≭|≮|≯|≰|≱|≲|≳|≴|≵|≶|≷|≸|≹|≺|≻|≼|≽|≾|≿|⊀|⊁|⊃|⊅|⊇|⊉|⊋|⊏|⊐|⊑|⊒|⊜|⊩|⊬|⊮|⊰|⊱|⊲|⊳|⊴|⊵|⊶|⊷|⋍|⋐|⋑|⋕|⋖|⋗|⋘|⋙|⋚|⋛|⋜|⋝|⋞|⋟|⋠|⋡|⋢|⋣|⋤|⋥|⋦|⋧|⋨|⋩|⋪|⋫|⋬|⋭|⋲|⋳|⋴|⋵|⋶|⋷|⋸|⋹|⋺|⋻|⋼|⋽|⋾|⋿|⟈|⟉|⟒|⦷|⧀|⧁|⧡|⧣|⧤|⧥|⩦|⩧|⩪|⩫|⩬|⩭|⩮|⩯|⩰|⩱|⩲|⩳|⩴|⩵|⩶|⩷|⩸|⩹|⩺|⩻|⩼|⩽|⩾|⩿|⪀|⪁|⪂|⪃|⪄|⪅|⪆|⪇|⪈|⪉|⪊|⪋|⪌|⪍|⪎|⪏|⪐|⪑|⪒|⪓|⪔|⪕|⪖|⪗|⪘|⪙|⪚|⪛|⪜|⪝|⪞|⪟|⪠|⪡|⪢|⪣|⪤|⪥|⪦|⪧|⪨|⪩|⪪|⪫|⪬|⪭|⪮|⪯|⪰|⪱|⪲|⪳|⪴|⪵|⪶|⪷|⪸|⪹|⪺|⪻|⪼|⪽|⪾|⪿|⫀|⫁|⫂|⫃|⫄|⫅|⫆|⫇|⫈|⫉|⫊|⫋|⫌|⫍|⫎|⫏|⫐|⫑|⫒|⫓|⫔|⫕|⫖|⫗|⫘|⫙|⫷|⫸|⫹|⫺|⊢|⊣|\+|\-|\||⊕|⊖|⊞|⊟|\+\+|∪|∨|⊔|±|∓|∔|∸|≂|≏|⊎|⊻|⊽|⋎|⋓|⧺|⧻|⨈|⨢|⨣|⨤|⨥|⨦|⨧|⨨|⨩|⨪|⨫|⨬|⨭|⨮|⨹|⨺|⩁|⩂|⩅|⩊|⩌|⩏|⩐|⩒|⩔|⩖|⩗|⩛|⩝|⩡|⩢|⩣|\&lt;\&lt;|\&gt;\&gt;|\&gt;\&gt;\&gt;|\*|/|÷|%|\&amp;|⋅|∘|×|\\|∩|∧|⊗|⊘|⊙|⊚|⊛|⊠|⊡|⊓|∗|∙|∤|⅋|≀|⊼|⋄|⋆|⋇|⋉|⋊|⋋|⋌|⋏|⋒|⟑|⦸|⦼|⦾|⦿|⧶|⧷|⨇|⨰|⨱|⨲|⨳|⨴|⨵|⨶|⨷|⨸|⨻|⨼|⨽|⩀|⩃|⩄|⩋|⩍|⩎|⩑|⩓|⩕|⩘|⩚|⩜|⩞|⩟|⩠|⫛|⊍|▷|⨝|⟕|⟖|⟗|//|\^|↑|↓|⇵|⟰|⟱|⤈|⤉|⤊|⤋|⤒|⤓|⥉|⥌|⥍|⥏|⥑|⥔|⥕|⥘|⥙|⥜|⥝|⥠|⥡|⥣|⥥|⥮|⥯|￪|￬))\!]+\!?)({[^}]*})?\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.julia</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.type.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)(('|(\.'))*\.?')?</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.transposed-func.julia</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function_decl</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.julia</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.type.julia</string>
						</dict>
					</dict>
					<key>match</key>
					<!-- <string>([^\s\[\]\(\)\{\}\!]*\!?)({(?:[^(?:\&lt;:)]*(\&lt;\:))?[^}]*})?\((?=.*\)\s*=(?!=))</string> -->
					<string>(?:\()?([^\s\[\]\(\)\{\}\!]*\!?)(?:\))?({[^}]*})?\((?=.*\)\s*=(?!=))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.julia</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.julia</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.type.julia</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(function|stagedfunction|macro)\s+([^\s\[\]\(\)\{\}\!]*\!?)({[^}]*})?\(</string>
				</dict>
			</array>
		</dict>
		<key>keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:function|stagedfunction|type|immutable|macro|quote|abstract|bitstype|typealias|module|baremodule|new)\b</string>
					<key>name</key>
					<string>keyword.other.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:if|else|elseif|while|for|in|begin|let|end|do|try|catch|finally|return|break|continue)\b</string>
					<key>name</key>
					<string>keyword.control.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:global|local|const|export|import|importall|using)\b</string>
					<key>name</key>
					<string>storage.modifier.variable.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>@\w+\b</string>
					<key>name</key>
					<string>support.function.macro.julia</string>
				</dict>
			</array>
		</dict>
		<key>number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>((\b0(x|X)[0-9a-fA-F](_?[0-9a-fA-F])*)|(\b0o[0-7](_?[0-7])*)|(\b0b[0-1](_?[0-1])*)|((\b[0-9](_?[0-9])*\.?(_?[0-9]*))|(\.[0-9](_?[0-9])*))((e|E)(\+|-)?(_?[0-9])*)?(im)?|\bInf(32)?\b|\bNaN(32)?\b)</string>
					<key>name</key>
					<string>constant.numeric.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\btrue\b|\bfalse\b|\bnothing\b</string>
					<key>name</key>
					<string>constant.language.julia</string>
				</dict>
			</array>
		</dict>
		<key>operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<!--
						Ugly regex to support nested types (to some degree at least)
						We need some push/pop state to do this nicely.
						Consider updating this file from .tmLanguage to .sublime-syntax
					-->
					<string>(?&lt;=::)\w+({[^{]*((\s*\,\s*\w+)?({[^{]*((\s*\,\s*\w+)?({[^{]*((\s*\,\s*\w+)?({[^{]*((\s*\,\s*\w+)?({[^{]*})?)*})?)*})?)*})?)*})?</string>
					<key>name</key>
					<string>support.type.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<!-- Bang operator must follow after whitespace or beginning of line, otherwise it is part of a variable name. -->
					<string>(?&lt;=(?:\s|^))!</string>
					<key>name</key>
					<string>keyword.operator.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<!-- Use the symbols defined in https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm -->
					<string>(?:(?:\:\=|\=\&gt;|~|\$\=|\?|\-\-|\-\-\&gt;|\|\|\&amp;\&amp;|\&lt;\:|\&gt;\:|\.\!|\|\&gt;|\&lt;\||\:|\.\.|\$|\:\:|\.|¬)|\.?(?:\=|\+\=|\-\=|\*\=|/\=|//\=|\=|\^\=|÷\=|%\=|\&lt;\&lt;\=|\&gt;\&gt;\=|\&gt;\&gt;\&gt;\=|\|\=|\&amp;\=|←|→|↔|↚|↛|↠|↣|↦|↮|⇎|⇏|⇒|⇔|⇴|⇶|⇷|⇸|⇹|⇺|⇻|⇼|⇽|⇾|⇿|⟵|⟶|⟷|⟷|⟹|⟺|⟻|⟼|⟽|⟾|⟿|⤀|⤁|⤂|⤃|⤄|⤅|⤆|⤇|⤌|⤍|⤎|⤏|⤐|⤑|⤔|⤕|⤖|⤗|⤘|⤝|⤞|⤟|⤠|⥄|⥅|⥆|⥇|⥈|⥊|⥋|⥎|⥐|⥒|⥓|⥖|⥗|⥚|⥛|⥞|⥟|⥢|⥤|⥦|⥧|⥨|⥩|⥪|⥫|⥬|⥭|⥰|⧴|⬱|⬰|⬲|⬳|⬴|⬵|⬶|⬷|⬸|⬹|⬺|⬻|⬼|⬽|⬾|⬿|⭀|⭁|⭂|⭃|⭄|⭇|⭈|⭉|⭊|⭋|⭌|￩|￫|\&gt;|\&lt;|\&gt;\=|≥|\&lt;\=|≤|\=\=|\=\=\=|≡|\!\=|≠|\!\=\=|≢|∈|∉|∋|∌|⊆|⊈|⊂|⊄|⊊|∝|∊|∍|∥|∦|∷|∺|∻|∽|∾|≁|≃|≄|≅|≆|≇|≈|≉|≊|≋|≌|≍|≎|≐|≑|≒|≓|≔|≕|≖|≗|≘|≙|≚|≛|≜|≝|≞|≟|≣|≦|≧|≨|≩|≪|≫|≬|≭|≮|≯|≰|≱|≲|≳|≴|≵|≶|≷|≸|≹|≺|≻|≼|≽|≾|≿|⊀|⊁|⊃|⊅|⊇|⊉|⊋|⊏|⊐|⊑|⊒|⊜|⊩|⊬|⊮|⊰|⊱|⊲|⊳|⊴|⊵|⊶|⊷|⋍|⋐|⋑|⋕|⋖|⋗|⋘|⋙|⋚|⋛|⋜|⋝|⋞|⋟|⋠|⋡|⋢|⋣|⋤|⋥|⋦|⋧|⋨|⋩|⋪|⋫|⋬|⋭|⋲|⋳|⋴|⋵|⋶|⋷|⋸|⋹|⋺|⋻|⋼|⋽|⋾|⋿|⟈|⟉|⟒|⦷|⧀|⧁|⧡|⧣|⧤|⧥|⩦|⩧|⩪|⩫|⩬|⩭|⩮|⩯|⩰|⩱|⩲|⩳|⩴|⩵|⩶|⩷|⩸|⩹|⩺|⩻|⩼|⩽|⩾|⩿|⪀|⪁|⪂|⪃|⪄|⪅|⪆|⪇|⪈|⪉|⪊|⪋|⪌|⪍|⪎|⪏|⪐|⪑|⪒|⪓|⪔|⪕|⪖|⪗|⪘|⪙|⪚|⪛|⪜|⪝|⪞|⪟|⪠|⪡|⪢|⪣|⪤|⪥|⪦|⪧|⪨|⪩|⪪|⪫|⪬|⪭|⪮|⪯|⪰|⪱|⪲|⪳|⪴|⪵|⪶|⪷|⪸|⪹|⪺|⪻|⪼|⪽|⪾|⪿|⫀|⫁|⫂|⫃|⫄|⫅|⫆|⫇|⫈|⫉|⫊|⫋|⫌|⫍|⫎|⫏|⫐|⫑|⫒|⫓|⫔|⫕|⫖|⫗|⫘|⫙|⫷|⫸|⫹|⫺|⊢|⊣|\+|\-|\||⊕|⊖|⊞|⊟|\+\+|∪|∨|⊔|±|∓|∔|∸|≂|≏|⊎|⊻|⊽|⋎|⋓|⧺|⧻|⨈|⨢|⨣|⨤|⨥|⨦|⨧|⨨|⨩|⨪|⨫|⨬|⨭|⨮|⨹|⨺|⩁|⩂|⩅|⩊|⩌|⩏|⩐|⩒|⩔|⩖|⩗|⩛|⩝|⩡|⩢|⩣|\&lt;\&lt;|\&gt;\&gt;|\&gt;\&gt;\&gt;|\*|/|÷|%|\&amp;|⋅|∘|×|\\|∩|∧|⊗|⊘|⊙|⊚|⊛|⊠|⊡|⊓|∗|∙|∤|⅋|≀|⊼|⋄|⋆|⋇|⋉|⋊|⋋|⋌|⋏|⋒|⟑|⦸|⦼|⦾|⦿|⧶|⧷|⨇|⨰|⨱|⨲|⨳|⨴|⨵|⨶|⨷|⨸|⨻|⨼|⨽|⩀|⩃|⩄|⩋|⩍|⩎|⩑|⩓|⩕|⩘|⩚|⩜|⩞|⩟|⩠|⫛|⊍|▷|⨝|⟕|⟖|⟗|//|\^|↑|↓|⇵|⟰|⟱|⤈|⤉|⤊|⤋|⤒|⤓|⥉|⥌|⥍|⥏|⥑|⥔|⥕|⥘|⥙|⥜|⥝|⥠|⥡|⥣|⥥|⥮|⥯|￪|￬))</string>
					<key>name</key>
					<string>keyword.operator.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\w|\]|\))+(('|(\.'))*\.?')</string> <!-- Must consume chars preceding the transpose operator, otherwise it will not match because the 'string' parser runs before this praser. -->
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.transpose.julia</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b\w+"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"\w*</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_custom_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>`</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.interpolated.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_custom_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\"</string>
					<key>name</key>
					<string>constant.character.escape.julia</string>
				</dict>
			</array>
		</dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[0-3]\d{0,2}|[4-7]\d?|x[a-fA-F0-9]{0,2}|u[a-fA-F0-9]{0,4}|U[a-fA-F0-9]{0,8}|.)</string>
					<key>name</key>
					<string>constant.character.escape.julia</string>
				</dict>
			</array>
		</dict>
		<key>symbol</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w\.\:\&lt;]:)(?&lt;=:)[^\.\:\(]?[\w\!\_]*</string>
					<key>name</key>
					<string>constant.other.symbol.julia</string>
				</dict>
			</array>
		</dict>
		<key>type_decl</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.type.julia</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.julia</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.julia</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.inheritance.julia</string>
						</dict>
					</dict>
					<key>match</key>
					<!-- <string>(type|immutable)\s+(\w+)(\s*(&lt;:)\s*\w+(?:{.*})?)?</string> -->
					<string>(type|immutable)\s+(\w+)</string>
					<key>name</key>
					<string>meta.type.julia</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.julia</string>
	<key>uuid</key>
	<string>F5D95417-DF9F-48AD-92DF-21CE62F7C31B</string>
</dict>
</plist>
